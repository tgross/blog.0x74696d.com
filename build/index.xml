<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>0x74696d</title>
    <link>https://blog.0x74696d.com/index.html</link>
    <description>Recent content on 0x74696d</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
        <atom:link href="https://blog.0x74696d.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tracing Optimized Edge-Triggered Systems</title>
      <link>https://blog.0x74696d.com/posts/tracing-optimized-edge-triggered-systems/</link>
      <pubDate>Sat, 23 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/tracing-optimized-edge-triggered-systems/</guid>
      <description>&lt;p&gt;Today I want to start by talking about hardware signals and end with an
explanation of why Nomad doesn&#39;t implement OpenTelemetry.&lt;/p&gt;
&lt;p&gt;The terms edge-triggered and level-triggered come from signal processing for
computer processors. Very roughly, for the CPU to service I/O or other changes
in external state, it needs to receive an interrupt (or &amp;quot;trap&amp;quot;) that tells it to
stop whatever it&#39;s currently doing to deal with the outside world. An
edge-triggered interrupt sends the signal and then returns to the previous
state, typically having set a register that the processor picks up on the next
cycle. Whereas a level-triggered interrupt sets a value on the line and holds it
there until the interrupt has been serviced on the next processor cycle.&lt;/p&gt;
&lt;img style=&#34;margin: 1em&#34; src=&#34;https://blog.0x74696d.com/images/20240323/signals.svg&#34; alt=&#34;rough plot of level-triggered vs edge-triggered signals&#34;&gt;
&lt;p&gt;The same terms get applied to distributed systems. An edge-triggered distributed
system receives discrete events and acts on them, whereas a level-triggered
distributed system monitors some state and acts when that state reaches certain
values.&lt;/p&gt;
&lt;p&gt;For example, under this loose definition, writing messages to a queue that get
processed by workers is an edge-triggered system. A system where a
reconciliation loops reads the current cluster state and then updates it is a
level-triggered system. Note for distributed level-triggered systems, the state
is typically &lt;em&gt;shared&lt;/em&gt; state from many inputs, as opposed to the signal line for
processor interrupts.&lt;/p&gt;
&lt;p&gt;Note that these are much less rigorous definitions than the ones in signal
processing! These are useful &lt;em&gt;models&lt;/em&gt; of systems but many real systems will fail
to strictly fall into one model or the other.&lt;/p&gt;
&lt;h2 id=&#34;cause-and-effect&#34;&gt;Cause and Effect&lt;/h2&gt;
&lt;p&gt;In distributed tracing, as implemented by projects like OpenTelemetry, we work
with &lt;em&gt;distributed events&lt;/em&gt; that get tagged with an ID at their conception. In a
web service, we might create the event at the browser client and add spans at
the load balancer, web server, application server, and database, on both the
request and response. The data model also handles fan-out, because each upstream
service adds its spans to the same event.&lt;/p&gt;
&lt;p&gt;Tracing provides a causal path through the whole system, because you can
correlate the actions of all components that acted on a given event. This is an
excellent fit for edge-triggered systems because each origin event results in a single unit of work.&lt;/p&gt;
&lt;p&gt;The tracing model falls apart quickly in level-triggered distributed systems
because the &amp;quot;level&amp;quot; is shared state. Multiple independent events can set the
level, so there&#39;s not a single origin event. Think of this like a thermostat set
to cool a building down to 20Â°C. If one person starts the oven, and another
person leaves the door open, it doesn&#39;t matter to the thermostat which of those
&amp;quot;events&amp;quot; allowed the temperature to get too high. There are multiple causes and
the data model for distributed tracing doesn&#39;t allow for this kind of fan-in of
events. You can only create the trace from the point at which the control loop
detected the level.&lt;/p&gt;
&lt;h2 id=&#34;edge-triggered-scheduling&#34;&gt;Edge-Triggered Scheduling&lt;/h2&gt;
&lt;p&gt;In Nomad, any change to the cluster state creates one or more &amp;quot;evaluations&amp;quot;,
which are the unit of work for the scheduler for a specific job. The change in
state can be an allocation failing, a user submitting a new job, a periodic job
firing, or any of a &lt;a href=&#34;https://github.com/hashicorp/nomad/blob/main/contributing/architecture-eval-triggers.md&#34;&gt;dozen other triggers&lt;/a&gt;. Evaluations are
written to Raft and enqueued in an evaluation broker on the leader. Scheduler
workers running across the control plane dequeue evaluations from the broker;
the workers run in parallel but the broker ensures that each job has at most one
evaluation in-flight at a time.&lt;/p&gt;
&lt;p&gt;The scheduler workers take a copy-on-write in-memory snapshot of the cluster
state at the moment they receive the evaluation, and reconcile the desired state
with the actual state. They submit the resulting scheduling decisions (&amp;quot;plans&amp;quot;)
to a leader to be serialized and written to state (&amp;quot;applied&amp;quot;). This is largely
the architecture described in the &lt;a href=&#34;https://storage.googleapis.com/pub-tools-public-publication-data/pdf/41684.pdf&#34;&gt;Omega paper (PDF)&lt;/a&gt;, and it&#39;s clearly an
edge-triggered system.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; So in theory it should be possible to use distributed
tracing here from the origin of an evaluation all the way through the resulting
plan.&lt;/p&gt;
&lt;p&gt;However, suppose that a job has ten running allocations and all of them
fail. Each failure event will result in an evaluation for the job. But if they
fail close together or the scheduler is busy processing other jobs, it&#39;s
possible all ten evaluations will be added to the broker before any scheduler
worker can dequeue them. Remember that the scheduler works with a snapshot taken
at the time the evaluation is received (the &lt;em&gt;current&lt;/em&gt; state), not a snapshot
somehow taken at the time the evaluation was created. For efficiency, it&#39;s safe
to throw out all of the other evaluations that happened between scheduling two
evaluations for a given job. And that&#39;s exactly &lt;a href=&#34;https://www.hashicorp.com/blog/load-shedding-in-the-nomad-eval-broker&#34;&gt;what Nomad does&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This sort of load-shedding optimization means evaluations can fan-in to a single
scheduling event. Creating an evaluation effectively sets a dirty bit for its
job, where that bit only means &amp;quot;this job needs reconciling&amp;quot;, and it doesn&#39;t
matter how many evaluations set that bit. Just like in a level-triggered system!&lt;/p&gt;
&lt;p&gt;From a product development standpoint this gap is a conundrum. Distributed
tracing is a popular idea and we should give users what they ask for, right?&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;
But if we implemented distributed tracing in Nomad it would be with traces
intentionally broken between the RPCs that create evaluations and the traces
created for the scheduler. Tracing each evaluation from start to finish would be
misleading, and having misleading traces is arguably worse than having no traces
at all. At least for now, the juice isn&#39;t worth the squeeze.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;As an aside, Kubernetes is often described casually as though
level-triggered. But based on my own limited work on Kubernetes controllers,
at least some are fairly similar to Nomad as described above, where they&#39;re
polling the &lt;a href=&#34;https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/event-v1/&#34;&gt;Events API&lt;/a&gt;, and using those events to kick off more complex
state queries.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Although to be honest I&#39;ve seen shockingly few deployments that haven&#39;t
been scaled back due to cost overruns.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The Max Power Way</title>
      <link>https://blog.0x74696d.com/posts/max-power-way/</link>
      <pubDate>Sun, 17 Dec 2023 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/max-power-way/</guid>
      <description>&lt;p&gt;In a 1999 episode of the Simpsons, Homer briefly changes his name to Max Power
in a bumbling attempt to adopt a more successful persona via nominative
determinism. The episode contains this memorable exchange:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Homer: &amp;quot;Kids, there&#39;s three ways to do things. The right way, the wrong way,
and the Max Power way!&amp;quot;&lt;/p&gt;
&lt;p&gt;Bart: &amp;quot;Isn&#39;t that the wrong way?&#39;&lt;/p&gt;
&lt;p&gt;Homer: &amp;quot;Yeah, but faster!&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That pretty much sums up my take on the value of Large Language Model (LLM)
coding assistants.&lt;/p&gt;
&lt;p&gt;I&#39;m mostly interested in two broad categories of criticism of LLMs. LLMs are
tools and we can talk about their value &lt;em&gt;as tools&lt;/em&gt; independently of any other
criticism. And then there&#39;s the social impact of introducing those tools in the
context of our industry. All the &amp;quot;AGI breakout&amp;quot; science fiction is deeply
unserious.&lt;/p&gt;
&lt;aside&gt;Addendum (2023-12-18): there&#39;s a whole &lt;em&gt;other&lt;/em&gt; thing we can be
critical about, which is the fast-and-loose relationship LLMs have with
intellectual property. But I&#39;m going to intentionally punt on that for another
day.&lt;/aside&gt;
&lt;p&gt;As tools, LLM coding assistants... just aren&#39;t all that impressive? Sure,
there&#39;s definitely an initial &amp;quot;wow&amp;quot; moment. But then you realize that a lot of
the code they generate is poor. This isn&#39;t unexpected. LLMs are trained not only
on the &amp;quot;best&amp;quot; code but on all available code, and the typical code you can grab
from a random repo is honestly pretty crap.&lt;/p&gt;
&lt;p&gt;LLMs have no understanding of your business domain, so I&#39;ve seen LLM suggestions
that are syntactically valid but just utter nonsense in the context of the work
to be done. What makes this worse is the autocomplete-style UX of the typical
tooling, so pairing with someone running VSCode with CoPilot and discussing a
tricky business domain problem is like having the worst PM in the world shouting
bad ideas the entire time.&lt;/p&gt;
&lt;p&gt;Large bodies of boilerplate code seem like worthy targets for LLMs. But this
carries extra risk, because code that&#39;s monotonous and repetitive is exactly the
kind of code humans are terrible at catching bugs in. This kind of problem is
better solved by deterministic code generation from interface definition
languages (IDL), like generating services from protobuf specs.&lt;/p&gt;
&lt;p&gt;Languages like Go also seem like promising targets for LLMs, because the
language itself fights against abstractions and is repetitive and tedious to
write. But it seems like every non-trivial Go project ends up building those
abstractions anyways because it helps so much in &lt;em&gt;reading&lt;/em&gt; the code. Go is
&amp;quot;simple&amp;quot; (to a fault) but this means reading it is like reading through a
straw. LLMs don&#39;t have enough context to build the kinds of whole program
abstractions you want. And it seems that the average example online of Go&#39;s
semi-structured concurrency with channels has subtle deadlocks, if the errors
I&#39;ve seen output by LLMs are to be believed.&lt;/p&gt;
&lt;p&gt;I&#39;ve seen an argument that a LLM assistant is like having a junior programmer
writing the code. You stand in for the presumably more experienced engineer who
reviews and corrects as it goes. Except unlike a junior it doesn&#39;t learn except
by retraining. If I had to correct a particularly dull junior engineer
repeatedly for the same mistakes, I might gently steer them into a career in
management.&lt;/p&gt;
&lt;p&gt;That &amp;quot;junior assistant&amp;quot; model isn&#39;t all that accessible to the junior engineer
themselves, either. Human beings can learn skills by watching others do them. If
I had to guess, watching the output of a machine is worse for learning than
watching another human performing a skill because of all those nice mirror
neurons we have. But it doesn&#39;t matter because humans &lt;em&gt;master&lt;/em&gt; skills only by
doing them. A junior engineer leaning on a LLM won&#39;t develop the skills they
need to determine if the output of the LLM is any good.&lt;/p&gt;
&lt;p&gt;And that leads directly to the wider social problem. If the hype around LLMs
allowed them to be just another tool in our toolbox, we could use them (or not)
and it&#39;d be a question of engineering tradeoffs. Most tools that fail to perform
at the rate LLMs do are quickly set aside, brought out only for the narrow
niches in which they work well. But a whole lot of people are buying into a hype
that LLMs are a massive paradigm change that will disrupt the industry.&lt;/p&gt;
&lt;p&gt;Now, there&#39;s a few folks in the industry who are cheering on some kind of giant
upheaval where millions of engineers lose their jobs. Maybe they think they&#39;ll
be among the anointed few spared by the techno-fascists running OpenAI or
whatever. No surprises there; every regressive movement co-opts a bunch of the
targeted group, class traitors who we should encourage to go play in traffic.&lt;/p&gt;
&lt;p&gt;Because management culture treats workers like interchangeable cogs, we should
expect that some organizations will try to replace workers with LLMs. Some
companies will decide that they can get rid of all their expensive senior folks
and just have cheaper juniors, or outsourced body shops, doing all the work with
LLM assistants. I&#39;m sure the compliance-security-industrial complex is already
eagerly spinning up new product lines to solve the resulting disasters from
that. Other companies will go the other direction and decide they can get rid of
all their junior folks and multiply the effort of senior folks with LLMs. But
without a pipeline of junior engineers, you eventually have no senior engineers.&lt;/p&gt;
&lt;p&gt;The successful organizations will be those who recognize that there&#39;s a
neverending backlog of creative work to be done, and that creative workers can&#39;t
be replaced by stochastic parrots. LLMs are just one tool and like all choice in
tools, those closest to the work should be left to decide whether they are the
right tool for the job. But recognizing that requires the kind of long horizon
thinking that&#39;s notably absent from most companies. It may be up to tech workers
to organize to make that future happen.&lt;/p&gt;
&lt;!--  LocalWords:  LLMs
 --&gt;
</description>
    </item>
    
    <item>
      <title>Two Kinds of UX Blunder</title>
      <link>https://blog.0x74696d.com/posts/two-kinds-of-ux-blunder/</link>
      <pubDate>Sun, 27 Nov 2022 18:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/two-kinds-of-ux-blunder/</guid>
      <description>&lt;p&gt;The house we rent has high ceilings along with lots of ceiling fans,
which is great for the warm months here in Philadelphia. Most of these
are the pull-cord type: a wall switch powers it on or off and then
there are two pulls that toggle the lamp and set the fan speed. But
the one above our dining room tables has a remote control, and it&#39;s a
good illustration of two different kinds of UX blunder.&lt;/p&gt;
&lt;p&gt;First let&#39;s set the stage. The image below is the remote control,
stuck to the wall with velcro tape. It&#39;s battery-powered and
presumably communicates via radio in the ISM band, like a garage door
opener or most other household devices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.0x74696d.com/images/20221127/remote.jpg&#34; alt=&#34;A ceiling fan remote control. It has five rubber buttons, four of which control the fan speed and the last which controls the lamp&#34;&gt;&lt;/p&gt;
&lt;p&gt;The buttons are cheap and squishy rubber, with a lot of give before
they activate. There&#39;s a small red LED above the buttons indicating
that a button has been pressed, but there&#39;s a delay of a half second
or so before anything actually happens on the fan overhead (and in any
case, the fan is behind you and overhead when pressing the buttons so
you can&#39;t see what&#39;s happening and the red light at the same
time). The relevance of this will be obvious in a moment.&lt;/p&gt;
&lt;p&gt;The four buttons towards the top of the remote control the fan. The
icons are three dots for the fastest speed, two for the second
fastest, and one dot for the lowest. The icons are raised to be
discernable by touch, and the fan speed buttons are even ever so
slightly different sizes. The fourth button shows the &lt;a href=&#34;https://en.wikipedia.org/wiki/Power_symbol&#34;&gt;IEEE 1621 power
symbol&lt;/a&gt;, which turns off the fan. It does not turn the fan back on,
but that&#39;s not even the worst use of iconography I&#39;ve seen &lt;em&gt;today&lt;/em&gt; so
we&#39;ll give that a pass.&lt;/p&gt;
&lt;p&gt;The last button has a sun-like icon which toggles the lamp. We noticed
when we moved in that the lamp was not very bright so we brought in a
few of our own light sources as well.&lt;/p&gt;
&lt;p&gt;One day a few months after moving in, I come downstairs and my spouse
informs me that there&#39;s something wrong with the ceiling lamp. As the
professional software meddler of the house it obviously falls upon me
to debug this. I press the button and the lamp is incredibly dim
â like a flickering candle. So I turn it back off, get the
ladder, and take off the globe. Only to find that none of the bulbs
are blown. Just dim. I push the button to turn them back on. Strange,
it seems like they were even dimmer now? And was it just my
imagination or was the delay from the remote longer than normal? I try
again, firmly holding down the button this time. Suddenly the lamp
flares to life!&lt;/p&gt;
&lt;p&gt;The button is a dimmer switch.&lt;/p&gt;
&lt;p&gt;The first UX blunder here is the easy one: discoverability. Nothing
about the interface of the remote suggests in any way that the lamp
was dimmable. Having multiple buttons for fan speeds but only one for
the lamp indirectly suggests that the lamp is &lt;em&gt;not&lt;/em&gt; adjustable. Now,
I&#39;m sure that there&#39;s a paper instruction booklet that came with the
fan that explains this. But this is a cheap ceiling fan bought by a
landlord years ago for a house he minimally renovated to rent
out. That instruction booklet is long gone.&lt;/p&gt;
&lt;p&gt;The software industry is mildly obsessed with
discoverability. Arguably this is economically incentivized. If you&#39;re
burning piles of money for hyper growth to bring on new users (while
vaguely ignoring the cohorts that churn out), discoverability is your
life blood. It&#39;s largely what determines &amp;quot;time to value&amp;quot;.&lt;/p&gt;
&lt;p&gt;But now my spouse and I know how the dimmer works. Within the limited
design space of this interface, we&#39;ve become &amp;quot;power users.&amp;quot; Which
means the overhead lamp is always set to the exact brightness we want
it and we never dim the lamp when we mean to turn it off, right?&lt;/p&gt;
&lt;p&gt;No! Because the second blunder here is an interface that encourages
user error. The affordance of the button is overloaded â it does
more than one thing. And feedback is delayed, so when you intend to
shut off the lamp you need to press long enough to know that your
command has been received, but not too long such that the remote
interprets this as a command to dim the lamp. You can understand
exactly how the interface is intended to work and still misuse it on a
regular basis.&lt;/p&gt;
&lt;p&gt;This kind of UX problem is overlooked in the software industry. The
user&#39;s mental model for software breaks down because the model isn&#39;t
reliable. Cause and effect become divorced by poor performance, opaque
asynchronous actions, and eventual consistency. Conversely, software
can have middling discoverability but work so reliably that once users
get over the learning curve they won&#39;t give it up. Software that
allows users to become experts is software that survives the test of
time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>io_uring and seccomp</title>
      <link>https://blog.0x74696d.com/posts/iouring-and-seccomp/</link>
      <pubDate>Sun, 27 Nov 2022 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/iouring-and-seccomp/</guid>
      <description>&lt;p&gt;Recent Linux kernels have the kqueue-alike &lt;a href=&#34;https://unixism.net/loti/&#34;&gt;&lt;code&gt;io_uring&lt;/code&gt;&lt;/a&gt; interface for
asynchronous I/O. Instead of making read and write syscalls, you write
batches of I/O requests to a circular buffer in userland called the
submission queue, and make a &lt;code&gt;io_uring_enter&lt;/code&gt; syscall to submit them
to the kernel. Instead of making individual syscalls, &lt;code&gt;io_uring&lt;/code&gt;
submission queue entries (SQEs) take an opcode for the specific I/O
operation they&#39;re performing, and that&#39;s mapped to the same kernel
code that normally services the syscall. You can read the results off
another buffer called the completion queue without making additional
syscalls to the kernel. This can meaningfully improve I/O performance,
especially in the face of Spectre/Meltdown mitigations.&lt;/p&gt;
&lt;p&gt;A side effect is that &lt;code&gt;io_uring&lt;/code&gt; effectively bypasses the protections
provided by seccomp filtering â we can&#39;t filter out syscalls we
never make! This isn&#39;t a security vulnerability per se, but something
you should keep in mind if you have especially paranoid seccomp
rules. Practically speaking it&#39;s going to be rare that anything I/O
related is going to be seccomp filtered, but I thought it was
interesting enough to reproduce myself.&lt;/p&gt;
&lt;p&gt;Suppose we want to prevent our application from making outbound
network requests by blocking the &lt;code&gt;connect(2)&lt;/code&gt; syscall. This is a
contrived example as you&#39;d most likely implement this via network
namespaces or iptables. But let&#39;s imagine the application needs to
look up an upstream address and connect to it once, but we want to
ensure the application can never make any new connections after that.&lt;/p&gt;
&lt;aside&gt;Addendum 2022/11/28: Giovanni Campagna pointed out &lt;a
href=&#34;https://mastodon.social/@gcampax/109417842749003392&#34;&gt;on
Mastodon&lt;/a&gt; that systemd uses seccomp filtering for its
RestrictAddressFamilies option. This controls the &lt;code&gt;socket&lt;/code&gt;
syscall. But &lt;code&gt;socket&lt;/code&gt; isn&#39;t one of the supported opcodes,
so io_uring applications still need to call the real
&lt;code&gt;socket&lt;/code&gt; syscall and RestrictAddressFamilies works just
fine. Of course you can&#39;t call &lt;code&gt;connect&lt;/code&gt; if you don&#39;t have
a socket in the first place, so that makes this example even more
contrived!&lt;/aside&gt;
&lt;p&gt;The examples below will stand-in for a buggy or compromised
application that&#39;s trying to make an outbound connection we want to
stop. First we&#39;ll use normal syscalls.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;use&lt;/span&gt; std::env;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;use&lt;/span&gt; std::io::{Read, Write};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;use&lt;/span&gt; std::net::{SocketAddr, TcpStream};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; args: &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Vec&lt;/span&gt;&amp;lt;_&amp;gt; = env::args().collect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; args.len() &amp;lt;= 1 {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        panic!(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;no addr specified&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; socket_addr: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SocketAddr&lt;/span&gt; = args[1].parse().unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; stream = TcpStream::connect(socket_addr).unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; buf = [0; 128];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; result = stream.write(&amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; buf);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println!(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;written: &lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;, result.unwrap());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; read = stream.read(&amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; buf).unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println!(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;read: &lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;{:?}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;, &amp;amp;buf[..read]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In another terminal I&#39;ll run &lt;code&gt;netcat&lt;/code&gt; listening on port 8000, and the
run this code to connect to it.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./target/debug/no_iouring 127.0.0.1:8000
written: 128
read: [102, 111, 111, 10]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we run this under &lt;code&gt;strace&lt;/code&gt;, we&#39;ll see something like this among the
syscalls:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;connect(3, {sa_family=AF_INET, sin_port=htons(8000), sin_addr=inet_addr(&amp;#34;127.0.0.1&amp;#34;)}, 16) = 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now let&#39;s look at the &lt;code&gt;io_uring&lt;/code&gt; approach for the same code. Note this
example is directly copied from the &lt;code&gt;tokio-uring&lt;/code&gt; &lt;a href=&#34;https://github.com/tokio-rs/tokio-uring/blob/master/examples/tcp_stream.rs&#34;&gt;TCP stream
example&lt;/a&gt; code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;use&lt;/span&gt; std::{env, net::SocketAddr};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;use&lt;/span&gt; tokio_uring::net::TcpStream;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; args: &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Vec&lt;/span&gt;&amp;lt;_&amp;gt; = env::args().collect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; args.len() &amp;lt;= 1 {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        panic!(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;no addr specified&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; socket_addr: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SocketAddr&lt;/span&gt; = args[1].parse().unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tokio_uring::start(&lt;span style=&#34;font-weight:bold&#34;&gt;async&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; stream = TcpStream::connect(socket_addr).&lt;span style=&#34;font-weight:bold&#34;&gt;await&lt;/span&gt;.unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; buf = vec![1&lt;span style=&#34;font-weight:bold&#34;&gt;u8&lt;/span&gt;; 128];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; (result, buf) = stream.write(buf).&lt;span style=&#34;font-weight:bold&#34;&gt;await&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        println!(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;written: &lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;, result.unwrap());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; (result, buf) = stream.read(buf).&lt;span style=&#34;font-weight:bold&#34;&gt;await&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; read = result.unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        println!(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;read: &lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;{:?}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;, &amp;amp;buf[..read]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we run this under &lt;code&gt;strace&lt;/code&gt;, we&#39;ll never see a &lt;code&gt;connect&lt;/code&gt;
syscall. Instead we&#39;ll see a &lt;code&gt;io_uring_setup&lt;/code&gt; to initialize the
buffers and then a series of syscalls like the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;io_uring_enter(6, 1, 0, 0, NULL, 128)   = 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now let&#39;s add a seccomp filter. First we&#39;ll need to lookup the syscall
number from the Linux source:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ grep connect ~/src/linux/arch/x86/entry/syscalls/syscall_64.tbl
42      common  connect                 sys_connect
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then using the &lt;a href=&#34;https://docs.rs/seccomp/latest/seccomp/&#34;&gt;&lt;code&gt;seccomp&lt;/code&gt; crate&lt;/a&gt; we&#39;ll create a rule that blocks all
uses of the syscall. Specifically the comparison function here is
saying that we&#39;ll block the syscall if the first argument (the file
handle) is greater than zero. We&#39;ll add this same code to the top of
the main function in both examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+extern crate libc;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+extern crate seccomp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; use std::{env, net::SocketAddr};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+use seccomp::*;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; use tokio_uring::net::TcpStream;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; fn main() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+    let mut ctx = Context::default(Action::Allow).unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+    let rule = Rule::new(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+        42, /* connect on x86_64 */
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+        Compare::arg(0).using(Op::Gt).with(0).build().unwrap(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+        Action::Errno(libc::EPERM), /* return EPERM */
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+    );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+    ctx.add_rule(rule).unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+    ctx.load().unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     let args: Vec&amp;lt;_&amp;gt; = env::args().collect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     if args.len() &amp;lt;= 1 {
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we run the synchronous syscall version, we&#39;ll get a permission
denied error:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./target/debug/no_iouring 127.0.0.1:8000
thread &amp;#39;main&amp;#39; panicked at &amp;#39;called `Result::unwrap()` on an `Err` value:
Os { code: 1, kind: PermissionDenied, message: &amp;#34;Operation not permitted&amp;#34; },
src/bin/no_iouring.rs:28:54
note: run with `RUST_BACKTRACE=1` environment variable to display
a backtrace
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Whereas if we run the &lt;code&gt;io_uring&lt;/code&gt; version, it connects just fine:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./target/debug/with_iouring 127.0.0.1:8000
written: 128
read: [102, 111, 111, 10]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It turns out you can setup &lt;code&gt;io_uring&lt;/code&gt; with an allowlist
(counterintuitively referred to as a &amp;quot;restriction&amp;quot;), and this is
supported by the &lt;code&gt;io_uring&lt;/code&gt; crate we used above if we dig enough to
find the &lt;a href=&#34;https://docs.rs/io-uring/latest/io_uring/struct.Submitter.html#method.register_restrictions&#34;&gt;&lt;code&gt;register_restrictions&lt;/code&gt;&lt;/a&gt; method. That works fine if the
seccomp filter is owned by the application as we&#39;ve done in our
examples. The application can set up restrictions to drop its own
privileges prior to starting any I/O, just as it might become an
unprivileged user or use &lt;code&gt;unshare&lt;/code&gt; to enter a restricted namespace.&lt;/p&gt;
&lt;p&gt;But if you&#39;ve got a separation of duties where a sysadmin sets up
seccomp filtering generically across applications, you won&#39;t be able
to take advantage of &lt;code&gt;io_uring&lt;/code&gt; restrictions without cooperation from
the application developer. This most likely comes up with container
deployments. Docker and containerd have default seccomp filters that
allow &lt;code&gt;io_uring&lt;/code&gt; (see where this was discussed in &lt;a href=&#34;https://github.com/moby/moby/pull/39415&#34;&gt;moby/39415&lt;/a&gt; or
&lt;a href=&#34;https://github.com/containerd/containerd/pull/4493&#34;&gt;containerd/4493&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Fortunately none of the available &lt;code&gt;io_uring&lt;/code&gt; opcodes correspond to
syscalls filtered by those default seccomp filters, so there&#39;s no
privilege escalation available here by default. But it&#39;s certainly
something you might want to check up on if you&#39;re expecting seccomp
filtering to harden your applications.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Platforms are Brownfield</title>
      <link>https://blog.0x74696d.com/posts/platforms-are-brownfield/</link>
      <pubDate>Sat, 11 Jun 2022 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/platforms-are-brownfield/</guid>
      <description>&lt;p&gt;The email comes that the newly-formed Platform Team will be migrating
all two thousand of the company&#39;s services to the New
Platform&lt;sup&gt;TM&lt;/sup&gt;. The new platform will ensure there&#39;s a single
workflow across the company for building, testing, securing, and
shipping software. The old legacy cruft that was weighing down
delivery will be swept away. Maybe there&#39;s an accompanying slide show
at the all-hands meeting to hype it up. The team has done a proof of
concept with some of the simple services, and will be working with
each service team to get their services ported by the end of the
quarter.&lt;/p&gt;
&lt;p&gt;A couple months in, things are moving quickly. The platform team has
taken lessons from product teams and shipped a &amp;quot;MVP&amp;quot; of the
platform. A majority of the company&#39;s services are stateless Rails (or
Spring Boot, or Go, whatever) applications that can be shipped in
containers and backed by managed databases. Then the platform team
sits down with the data science team to talk about migrating their
services...&lt;/p&gt;
&lt;p&gt;A year or two later, only half of the two thousand services have been
migrated. The New Platform project is far over-budget. Managers of
other teams have complained to the CTO how much toil of the migration
has landed on their own teams. The Platform&#39;s performance is poor,
because the team hasn&#39;t had time to invest in performance instead of
migrations. Half the Platform team has burned out and quit.&lt;/p&gt;
&lt;p&gt;I&#39;ve seen this play out a handful of times first hand now&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, and I&#39;ve
heard this same story from many other folks in the industry. It&#39;s not
limited to software-as-a-service delivery; I&#39;ve seen this happen with
design systems, documentation platforms, and CAD software, to varying
degree.&lt;/p&gt;
&lt;p&gt;The conventional wisdom here is that the platform team has done
everything right. They&#39;ve done the agile thing and started with a
proof-of-concept and MVP. They focused on getting the most business
value out of the platform as quickly as possible, pushing off the long
tail of services for later.&lt;/p&gt;
&lt;p&gt;But that long tail of post-MVP services breaks all the assumptions of
the New Platform. So they end up hacking in new capabilities for
exceptions, and the pile of hacks grows continuously. The platform is
all in on containers, but one team needs nested virtualization. The
platform assumes services are stateless, but one team stores
long-running process checkpoints on disk. The platform assumes Linux,
but one team has custom electrical engineering software written for
them twenty years ago that only runs on MS-DOS, and they don&#39;t own the
source. That one was fun.&lt;/p&gt;
&lt;p&gt;What&#39;s going wrong? In the abstract, the promise of the &amp;quot;platform&amp;quot; is
that it&#39;ll reduce complexity of a process. But in organizations large
enough to care about platforms, much of the complexity is &lt;em&gt;inherent&lt;/em&gt;
complexity of the business domain, not incidental complexity.&lt;/p&gt;
&lt;p&gt;Developers are lured by the promise of building a greenfield platform,
but building a platform is always brownfield work. Platform
developers, in a rush to simplify a process, are failing to recognize
that they&#39;re trying to simplify the &lt;em&gt;business&lt;/em&gt;. And the business is
going to resist being simplified.&lt;/p&gt;
&lt;p&gt;Platform teams can avoid this trap by embracing the inherent
complexity early on. Of course they should start with a simplified
proof-of-concept. But if platform teams are going to borrow concepts
like &amp;quot;MVP&amp;quot; from product development, they should also borrow
&amp;quot;product-market fit&amp;quot;. Platform teams should be seeking out the weird
corners of the company to discover the true scope of their project, so
that the platform isn&#39;t so rigid that it can&#39;t tolerate difference.&lt;/p&gt;
&lt;p&gt;At the same time, why is it so important that disparate teams across
the whole company use the same process?  Engineers aren&#39;t
fungible. There&#39;s no danger that the data science team is going to be
re-org&#39;d next week and turned into web developers, or vice
versa. Centralizing process onto a platform isn&#39;t being done for some
abstract value of simplifying things â it&#39;s a decision that the
pain of migration is worth some business value. But migrating the long
tail of applications might no longer match that business
value. Establishing that migrating the long tail of applications is a
non-goal should always be considered an option.&lt;/p&gt;
&lt;p&gt;Part of embracing complexity may be accepting that the dream of a
single platform was always just a dream.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Certainly never with any of my current or prior employers or
their customers with whom I have non-disclosure agreements, of
course.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An Embedded WASM Shell</title>
      <link>https://blog.0x74696d.com/posts/embedded-wasm-shell/</link>
      <pubDate>Thu, 30 Sep 2021 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/embedded-wasm-shell/</guid>
      <description>&lt;p&gt;If I go back far enough, it&#39;s clear my professional career in tech
started with the realization that AutoCAD&#39;s command line interface was
in fact a &lt;em&gt;shell&lt;/em&gt;. It didn&#39;t just accept instructions, but you could
write little programs in this &amp;quot;weird language&amp;quot; called Lisp and it
would make calculations based on your drawing or even make changes to
the drawing&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. I started with automating repetitive work, and then
one day a forward-thinking architect I worked with asked if I could
write a program that would make accurate construction bid
estimates. The first project built came within 5% of the software
estimated budget, and it&#39;s been a roughly 20 year trip from there to
writing blog posts about WASM for you today.&lt;/p&gt;
&lt;p&gt;But the important part of this trip down memory lane is the notion
that you can have software that includes a constrained embedded
programming environment, and the power this provides a skilled user to
fit the software to their purpose. A former colleague &lt;a href=&#34;https://twitter.com/numbsafari&#34;&gt;Sam
Wilson&lt;/a&gt; gave a great talk at the
Philadelphia DevOps meetup a few years ago&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; where he called this
idea &amp;quot;coding in production.&amp;quot; The key to making this work is that the
interface should be exploratory, as one gets with a REPL or SQL
console, and that it should be properly constrained for safety.&lt;/p&gt;
&lt;p&gt;This all came to mind again recently while working on an application
with a lot of internal state, where I wanted to expose a REPL to
operators so they could debug that state &amp;quot;live&amp;quot;. For various reasons,
I want to be able to assert to the owner of the data that the shell
user can&#39;t arbitrarily damage the data&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. So I&#39;ve built the
beginnings of an embeddable Scheme interpreter in Rust, compiled to a
Web Assembly (WASM) module hosted via Wasmtime.&lt;/p&gt;
&lt;p&gt;Most of the use cases I&#39;ve seen for WASM boil down to either (1) &amp;quot;I
don&#39;t want to write JavaScript for the web&amp;quot; or (2) &amp;quot;I want to host
other people&#39;s untrusted code in a PaaS-like environment&amp;quot;, which are
both awesome use cases. But this means that a lot of the example code
in the documentation handwaves over the communication between the host
application and the WASM guest, because either you&#39;re leaning on DOM
bindgen libraries or exposing a narrow system interface to the guest
like allowing it access to specific file handles. In particular, I
struggled with figuring out how a guest written in Rust was supposed
to set up linear memory and make host function calls.&lt;/p&gt;
&lt;p&gt;I&#39;ve published the code below as a repository with commits for each
step at &lt;a href=&#34;https://github.com/tgross/wasm-shell-example&#34;&gt;tgross/wasm-shell-example&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Allergy warning: please note that this use case requires the
&lt;code&gt;unsafe&lt;/code&gt; keyword in the guest application. The host application has
no use of &lt;code&gt;unsafe&lt;/code&gt; in the application code, but of course if you dig
down far enough into the wasmtime library you&#39;ll find it there as
well. In any case, this code was extracted from the project I&#39;m
working on and is intended for educational purposes and not any
particular use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because my Scheme interpreter is incomplete and not the point of this
post, we&#39;ll start with the dumbest possible shell that just echos
whatever you input:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;loop&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; user_input = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;String&lt;/span&gt;::new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        io::stdin()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .read_line(&amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; user_input)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .expect(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;error reading in user input&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; result = eval(&amp;amp;user_input);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        println!(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;{:?}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;, result);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;eval&lt;/span&gt;(input: &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;str&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;str&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    input
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&#39;ll set up a Cargo workspace with an empty host application, and
exclude the shell from the workspace so that we can compile it to a
separate target via a Makefile&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. Then we compile the shell with
&lt;a href=&#34;https://github.com/bytecodealliance/cargo-wasi&#34;&gt;&lt;code&gt;cargo wasi build&lt;/code&gt;&lt;/a&gt; and get a &lt;code&gt;.wasm&lt;/code&gt; target. This is commit &lt;a href=&#34;https://github.com/tgross/wasm-shell-example/commit/0e7dff66bf2537f4da0254a7683922a031731cf4&#34;&gt;&lt;code&gt;0e7dff6&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next we&#39;ll build the host. Most of this is right out of the &lt;a href=&#34;https://docs.wasmtime.dev/examples-rust-hello-world.html&#34;&gt;Wasmtime
docs on embedding in Rust&lt;/a&gt;, but I want to point out that we&#39;re using
WASI to let the guest inherit stdin/stdout from the host:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; wasi = WasiCtxBuilder::new().inherit_stdio().build();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; store = Store::new(&amp;amp;engine, wasi);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With &lt;code&gt;cargo run&lt;/code&gt; we can interact with the shell directly in our
terminal. This is commit &lt;a href=&#34;https://github.com/tgross/wasm-shell-example/commit/c1e34bb804d81932d9e9dc1c92fc360e576362d0&#34;&gt;&lt;code&gt;c1e34bb&lt;/code&gt;&lt;/a&gt;, but it&#39;s not very interesting.&lt;/p&gt;
&lt;p&gt;Instead, let&#39;s have the host expose a Unix Domain Socket, and have
each connection on this socket start its own shell. This gives us an
example of how the host program can restrict the guest. We could allow
remote access over TLS with authentication, we could rate-limit
connections or data transfer, or we could allow certain users access
to more WASM &amp;quot;fuel&amp;quot; than others. So long as we implement the
&lt;code&gt;std::io::{Read, Write}&lt;/code&gt; traits, the guest shell doesn&#39;t need to know
(and indeed &lt;em&gt;shouldn&#39;t know&lt;/em&gt;) these details.&lt;/p&gt;
&lt;p&gt;For each connection, we&#39;ll spawn a thread and hand it the new stream
and reference-counted copies of the WASM engine, our compile module,
the linker with our functions (we&#39;ll come back to those in a moment),
and the application state:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; linker = Arc::new(linker);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; state = Arc::new(Mutex::new(State::new()));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; listener = UnixListener::bind(bind_path)?;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; stream &lt;span style=&#34;font-weight:bold&#34;&gt;in&lt;/span&gt; listener.incoming() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;match&lt;/span&gt; stream {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Ok&lt;/span&gt;(stream) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; state = state.clone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; engine = engine.clone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; module = module.clone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; linker = linker.clone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            thread::spawn(&lt;span style=&#34;font-weight:bold&#34;&gt;move&lt;/span&gt; || handle_client(stream, &amp;amp;engine, &amp;amp;module, &amp;amp;linker, &amp;amp;state));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Err&lt;/span&gt;(_) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            eprintln!(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;connection failed&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the handler, we end up needing to clone the stream twice: once to
split it into a reader and writer stream (for stdin and stdout), and
once more to have an error channel so the host can send in-band error
messages to the client even if the guest shell exits unexpectedly.&lt;/p&gt;
&lt;p&gt;Next we present the two streams as &lt;code&gt;WasiFile&lt;/code&gt; to the WASI context, and
spawn a new &lt;code&gt;wasmtime::Store&lt;/code&gt; from this context and the application
state:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; wasi = WasiCtxBuilder::new()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .stdin(&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Box&lt;/span&gt;::new(ReadPipe::new(stream)) &lt;span style=&#34;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Box&lt;/span&gt;&amp;lt;&lt;span style=&#34;font-weight:bold&#34;&gt;dyn&lt;/span&gt; WasiFile&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .stdout(&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Box&lt;/span&gt;::new(WritePipe::new(write_stream)) &lt;span style=&#34;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Box&lt;/span&gt;&amp;lt;&lt;span style=&#34;font-weight:bold&#34;&gt;dyn&lt;/span&gt; WasiFile&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .build();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; store = Store::new(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;amp;engine,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    StoreData {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        state: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;state&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wasi: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;wasi&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And finally we instantiate our WASM instance with the shell. Because
we&#39;ve built a binary (i.e. something with a &lt;code&gt;main&lt;/code&gt;), we&#39;ll call the
&lt;code&gt;_start&lt;/code&gt; function. This is commit &lt;a href=&#34;https://github.com/tgross/wasm-shell-example/commit/fafc0f316ad30ef318019b8f7253dd896a920ea4&#34;&gt;&lt;code&gt;fafc0f3&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; run_interpreter = &lt;span style=&#34;font-weight:bold&#34;&gt;move&lt;/span&gt; || -&amp;gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Result&lt;/span&gt;&amp;lt;(), Trap&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; instance = linker.instantiate(&amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; store, module)?;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; run = instance.get_typed_func::&amp;lt;(), (), _&amp;gt;(&amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; store, &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;_start&amp;#34;&lt;/span&gt;)?;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    run.call(&amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; store, ())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Err&lt;/span&gt;(e) = run_interpreter() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Err&lt;/span&gt;(e) = write!(&amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; err_stream, &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;, e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        eprintln!(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;, e);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this point we can &lt;code&gt;cargo run&lt;/code&gt; and connect to the socket file from
another terminal with &lt;code&gt;socat - UNIX-CONNECT:/tmp/wasm-shell.sock&lt;/code&gt;. But
our shell still doesn&#39;t &lt;em&gt;do&lt;/em&gt; anything other than echo back our
results. Let&#39;s change that.&lt;/p&gt;
&lt;h2 id=&#34;updating-host-state-from-the-guest&#34;&gt;Updating Host State from the Guest&lt;/h2&gt;
&lt;p&gt;Earlier we&#39;d glossed over the application state, so let&#39;s populate a
&lt;code&gt;State&lt;/code&gt; and a separate &lt;code&gt;StoreData&lt;/code&gt; that contains the state and the
&lt;code&gt;WasiCtx&lt;/code&gt; for the WASM engine. The host application will use this same
object to manipulate state from its side. This could even include a
reference to your database connection if our application had one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;State&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    counts: &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Vec&lt;/span&gt;&amp;lt;&lt;span style=&#34;font-weight:bold&#34;&gt;i32&lt;/span&gt;&amp;gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;StoreData&lt;/span&gt;&amp;lt;&amp;#39;a&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state: &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&amp;#39;a &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Arc&lt;/span&gt;&amp;lt;Mutex&amp;lt;State&amp;gt;&amp;gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wasi: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;WasiCtx&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our state is a vector of integers, and the two functions we&#39;re going
to expose to the shell are &lt;code&gt;add&lt;/code&gt; to push another number onto the
vector, and &lt;code&gt;sum&lt;/code&gt; to total all the numbers we&#39;ve seen so far. I&#39;m
intentionally punting on more complex objects like strings for the
moment, but we&#39;ll come back to that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;impl&lt;/span&gt; State {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;add&lt;/span&gt;(&amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;self&lt;/span&gt;, val: &lt;span style=&#34;font-weight:bold&#34;&gt;i32&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;self&lt;/span&gt;.counts.push(val);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;sum&lt;/span&gt;(&amp;amp;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;self&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;self&lt;/span&gt;.counts.iter().fold(0, |&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; sum, &amp;amp;x| {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sum += x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wrapping one of these functions has some important details to call
out. The first string is the name of the module our guest will import,
and the second string is the name we&#39;ll expose to the guest shell. The
signature of the closure is a &lt;a href=&#34;https://docs.rs/wasmtime/0.18.0/wasmtime/struct.Func.html#method.wrap&#34;&gt;&lt;code&gt;wasmtime::IntoFunc&lt;/code&gt;&lt;/a&gt; and all the
arguments must be compatible with WebAssembly types. So for example,
you can&#39;t pass a &lt;code&gt;usize&lt;/code&gt; or &lt;code&gt;u8&lt;/code&gt; here, nor can you return a tuple or
struct. When we want to manipulate the state, we call either &lt;code&gt;data()&lt;/code&gt;
or &lt;code&gt;data_mut()&lt;/code&gt; to get a reference (or mutable reference) to the
caller&#39;s &lt;code&gt;Store&lt;/code&gt;, and then take the mutex to finally get our &lt;code&gt;State&lt;/code&gt;
methods.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;linker.func_wrap(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;host_add&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; caller: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Caller&lt;/span&gt;&amp;lt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;&amp;#39;_&lt;/span&gt;, StoreData&amp;gt;, param: &lt;span style=&#34;font-weight:bold&#34;&gt;i32&lt;/span&gt;| {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        caller.data_mut().state.lock().unwrap().add(param);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)?;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How do we call these functions from our shell? The Wasmtime &lt;a href=&#34;https://docs.wasmtime.dev/wasm-rust.html#importing-host-functionality&#34;&gt;import
host functionality&lt;/a&gt; docs are helpful here. Note that calling these
functions is always &lt;code&gt;unsafe&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;#[link(wasm_import_module = &lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;host_add&lt;/span&gt;(count: &lt;span style=&#34;font-weight:bold&#34;&gt;i32&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;host_sum&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;i32&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lastly, we&#39;ll update our &lt;code&gt;eval&lt;/code&gt; function in the guest to parse our
inputs and call the functions. Normally we&#39;d probably want to use a
real command-line parsing library, but this will do for now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;eval&lt;/span&gt;(input: &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;str&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;String&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; parsed: &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Vec&lt;/span&gt;&amp;lt;_&amp;gt; = input.trim_end().trim_start().split(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;).collect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;match&lt;/span&gt; parsed.get(0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Some&lt;/span&gt;(&amp;amp;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;sum&amp;#34;&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;unsafe&lt;/span&gt; { format!(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;, host_sum()) },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Some&lt;/span&gt;(&amp;amp;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;match&lt;/span&gt; parsed.get(1) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Some&lt;/span&gt;(next) =&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;str&lt;/span&gt;::parse(next) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Ok&lt;/span&gt;(i) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;font-weight:bold&#34;&gt;unsafe&lt;/span&gt; { host_add(i); }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt;.to_string()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                _ =&amp;gt; { ... }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _ =&amp;gt; { ... }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this point we should be able to run the application, and connect
with two different instances of socat. Each connection should be able
to see the changes written to the state by the other, so if we &lt;code&gt;add 2&lt;/code&gt;
in one and &lt;code&gt;add 3&lt;/code&gt; in the other, &lt;code&gt;sum&lt;/code&gt; will now return &lt;code&gt;5&lt;/code&gt; in
both. This is commit &lt;a href=&#34;https://github.com/tgross/wasm-shell-example/commit/a226910c2201500e4108b7c6fa851eee9ed1f8dc&#34;&gt;&lt;code&gt;a226910&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;working-around-interface-types&#34;&gt;Working Around Interface Types&lt;/h2&gt;
&lt;p&gt;To use functions that pass arguments or return values that are
something other than integers and floats, we need &lt;a href=&#34;https://github.com/webassembly/interface-types&#34;&gt;WebAssembly
Interface Types&lt;/a&gt;. Unfortunately these have not yet been standardized
and shipped! This would put a damper on our ambitions to have a shell,
but we can work around this by using WASM linear memory.&lt;/p&gt;
&lt;p&gt;Effectively what we&#39;re going to do is make a syscall-like interface
between our guest and host. The guest will write to a buffer, and then
call a host function passing a pointer (or rather, an offset in the
WASM linear memory) and length for each parameter and for the return
value. The host will get the result and write the value back to return
buffer and return the length of the data written to the caller.&lt;/p&gt;
&lt;p&gt;We&#39;ll be using &amp;quot;safe&amp;quot; &lt;code&gt;wasmtime::Memory&lt;/code&gt; interfaces on the host side
that copy the data out before working on it, and on the guest side
we&#39;re single threaded and waiting on the return from the host
function. So we don&#39;t need to worry about the guest messing with the
data while we&#39;re reading it. (And hopefully interface types ship
before threads!)&lt;/p&gt;
&lt;p&gt;That being said, I managed to segfault the guest a few dozen times
before finally finding Radu Matei&#39;s excellent &lt;a href=&#34;https://radu-matei.com/blog/practical-guide-to-wasm-memory/&#34;&gt;&lt;em&gt;Practical Guide to
WASM Memory&lt;/em&gt;&lt;/a&gt;. The control flow we have here is reverse from Matei&#39;s
post, because the guest is deciding what to allocate. But as it turns
out this largely gets implemented in the same way. We want these two
functions in the guest:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;alloc&lt;/span&gt;(len: &lt;span style=&#34;font-weight:bold&#34;&gt;usize&lt;/span&gt;) -&amp;gt; *&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;u8&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; buf = vec![0&lt;span style=&#34;font-weight:bold&#34;&gt;u8&lt;/span&gt;; len];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; ptr = buf.as_mut_ptr();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std::mem::forget(buf);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ptr
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;unsafe&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;dealloc&lt;/span&gt;(ptr: *&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;u8&lt;/span&gt;, len: &lt;span style=&#34;font-weight:bold&#34;&gt;usize&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; _buf = &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Vec&lt;/span&gt;::from_raw_parts(ptr, 0, len);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std::mem::&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;drop&lt;/span&gt;(_buf);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we were exporting these functions from the guest these would need
to be &lt;code&gt;extern &amp;quot;C&amp;quot;&lt;/code&gt;, but in this workflow we&#39;ll keep all the &lt;code&gt;unsafe&lt;/code&gt;
code inside the guest. When the guest prepares a buffer for the host
(either a parameter or space for the result), it calls &lt;code&gt;alloc&lt;/code&gt;. That
&lt;code&gt;alloc&lt;/code&gt; function &amp;quot;forgets&amp;quot; about the buffer we allocate without
dropping it. If we skip this, the buffer will get reclaimed and the
host will get garbage data (which it will safely reject when it tries
to parse it into a string). But the error message we write in the
return buffer is also corrupt in the same way, and the guest crashes
(&amp;quot;traps&amp;quot;, in WASM parlance). This workflow also means we need to clean
up the buffer manually with &lt;code&gt;dealloc&lt;/code&gt;. In &lt;code&gt;dealloc&lt;/code&gt; we read the buffer
pointed to by the pointer, and then drop it.&lt;/p&gt;
&lt;p&gt;We can put this all together to pass a string to the &lt;code&gt;host_kv_get&lt;/code&gt;
function. We allocate a buffer for the key, and copy the key into
it. We also need to allocate the buffer for the response. Then we pass
the pointers and lengths of both buffers into the &lt;code&gt;host_kv_get&lt;/code&gt;
function that we&#39;ve imported. The return value of &lt;code&gt;host_kv_get&lt;/code&gt; will
be the number of bytes written into the response buffer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;eval_kv_get&lt;/span&gt;(key: &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;str&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;String&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; key_len = key.len();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;unsafe&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; key_ptr = alloc(key.len());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        std::ptr::copy(key.as_ptr(), key_ptr, key_len);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; res_ptr = alloc(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;MAX_RESPONSE_LENGTH&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; _res_len = host_kv_get(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            key_ptr &lt;span style=&#34;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            key_len &lt;span style=&#34;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            res_ptr &lt;span style=&#34;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;MAX_RESPONSE_LENGTH&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; res_len = _res_len.try_into().unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        res = read_results(res_ptr, res_len);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// free our forgotten memory for the key; the from_utf8 will
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// free the response buffer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;        dealloc(key_ptr, key_len);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;match&lt;/span&gt; std::&lt;span style=&#34;font-weight:bold&#34;&gt;str&lt;/span&gt;::from_utf8(&amp;amp;res) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Ok&lt;/span&gt;(s) =&amp;gt; s.to_string(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Err&lt;/span&gt;(err) =&amp;gt; format!(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;error parsing results as string: &lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;{:?}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;, err),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;eval_key_set&lt;/code&gt; function is almost identical, but with an extra
buffer for the value we want to set. The guest side of this work is
commit &lt;a href=&#34;https://github.com/tgross/wasm-shell-example/commit/c84c5960726bdaf4e02ae25541d2a33a378adb51&#34;&gt;&lt;code&gt;c84c596&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;reading-memory-from-the-host&#34;&gt;Reading Memory From the Host&lt;/h2&gt;
&lt;p&gt;As we saw earlier the &lt;a href=&#34;https://docs.rs/wasmtime/0.30.0/wasmtime/struct.Func.html#method.wrap&#34;&gt;&lt;code&gt;wasmtime::FuncWrap&lt;/code&gt;&lt;/a&gt; expects a closure and if
we want to access memory the first parameter of that closure is a
&lt;a href=&#34;https://docs.rs/wasmtime/0.30.0/wasmtime/struct.Caller.html#&#34;&gt;&lt;code&gt;wasmtime::Caller&lt;/code&gt;&lt;/a&gt;. Getting the memory and accessing the store in
the correct order is a little fussy if you want to both read and write
to memory in the same function (as we do here), because writing will
need a mutable borrow. I&#39;ve elided some error handling here but you
can see the full code listing in commit &lt;a href=&#34;https://github.com/tgross/wasm-shell-example/commit/f95d3980b7d77a446d1b5c23cf466af33a0792d7&#34;&gt;&lt;code&gt;f95d398&lt;/code&gt;&lt;/a&gt;. Note that we&#39;re
looking for the export named &amp;quot;memory&amp;quot;, which is what the &lt;code&gt;wasm32-wasi&lt;/code&gt;
target &lt;a href=&#34;https://docs.wasmtime.dev/wasm-rust.html#exporting-rust-functionality&#34;&gt;exports by default&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;linker.func_wrap(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;host_kv_get&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; caller: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Caller&lt;/span&gt;&amp;lt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;&amp;#39;_&lt;/span&gt;, StoreData&amp;gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     key_ptr: &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;, key_len: &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     res_ptr: &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;, res_len: &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     -&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; mem = &lt;span style=&#34;font-weight:bold&#34;&gt;match&lt;/span&gt; caller.get_export(&amp;amp;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;memory&amp;#34;&lt;/span&gt;){ ... }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; store = caller.as_context();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; result = kv_get(mem, &amp;amp;store, key_ptr, key_len, res_ptr, res_len);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// now that we&amp;#39;re done with our borrow, upgrade to mutable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; store = caller.as_context_mut();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold&#34;&gt;match&lt;/span&gt; result {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Ok&lt;/span&gt;(response) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; write_response(mem, &amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; store, res_ptr, res_len, response)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .map_err(|err| eprintln!(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;, err))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .unwrap_or(0);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Err&lt;/span&gt;(err) =&amp;gt; { ... }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)?;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This wrapper is calling into functions that return a &lt;code&gt;Result&lt;/code&gt; and then
it&#39;s responsible for writing that response back. The &lt;code&gt;kv_get&lt;/code&gt;
implementation can be fairly slim:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;kv_get&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mem: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Memory&lt;/span&gt;, store: &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;StoreContext&lt;/span&gt;&amp;lt;StoreData&amp;gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    key_ptr: &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;, key_len: &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res_ptr: &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;, res_len: &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) -&amp;gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Result&lt;/span&gt;&amp;lt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;String&lt;/span&gt;&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; key = read_parameter(mem, &amp;amp;store, key_ptr, key_len)?;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    validate_wasm_param(res_ptr, res_len)?;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; max_len: &lt;span style=&#34;font-weight:bold&#34;&gt;usize&lt;/span&gt; = res_len.try_into().unwrap_or(1024);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; map = &amp;amp;store.data().state.lock().unwrap().map;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; response = map.get(&amp;amp;key).ok_or(anyhow!(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;no such key&amp;#34;&lt;/span&gt;))?.to_string();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    response.truncate(max_len);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Ok&lt;/span&gt;(response)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And finally we have a couple of helper functions for reading and
writing the memory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;read_parameter&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mem: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Memory&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    store: &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;StoreContext&lt;/span&gt;&amp;lt;StoreData&amp;gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ptr: &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    len: &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) -&amp;gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Result&lt;/span&gt;&amp;lt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;String&lt;/span&gt;&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    validate_wasm_param(ptr, len)?;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; buf = vec![0&lt;span style=&#34;font-weight:bold&#34;&gt;u8&lt;/span&gt;; len &lt;span style=&#34;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;usize&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mem.read(&amp;amp;store, ptr.try_into()?, &amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; buf)?;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Ok&lt;/span&gt;(std::&lt;span style=&#34;font-weight:bold&#34;&gt;str&lt;/span&gt;::from_utf8(&amp;amp;buf)?.to_string())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;write_response&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mem: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Memory&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    store: &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;mut&lt;/span&gt; StoreContextMut&amp;lt;StoreData&amp;gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ptr: &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    max_len: &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; response: &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;String&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) -&amp;gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Result&lt;/span&gt;&amp;lt;&lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    response.truncate(max_len.try_into()?);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mem.write(store, ptr.try_into()?, response.as_bytes())?;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;Ok&lt;/span&gt;(response.len() &lt;span style=&#34;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;u32&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is all wired up in commit &lt;a href=&#34;https://github.com/tgross/wasm-shell-example/commit/f95d3980b7d77a446d1b5c23cf466af33a0792d7&#34;&gt;&lt;code&gt;f95d398&lt;/code&gt;&lt;/a&gt;. Now we can &lt;code&gt;cargo run&lt;/code&gt; and
connect to the shell, and do &lt;code&gt;set :key :val&lt;/code&gt; in one shell and retrieve
that value from &lt;code&gt;get :key&lt;/code&gt; in another shell.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;So how practical is all of this? I haven&#39;t yet explored async
functions, which is fine for this use case but could be a performance
issue for guests that are doing a lot of IO. There&#39;s definitely enough
to build a real application here. But expect to have to make some
investment in the infrastructure around host/guest communication.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The command window doubled as an AutoLISP REPL, but you could
of course also load programs from files on disk, including while
starting up AutoCAD. I have a vague memory that the entire drawing
could even be exported as a s-expression in text format, but a
quick look at the DXF format spec says my memory is faulty. Was
there another way to do this that I&#39;ve forgotten?&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Sadly it&#39;s not online anywhere.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Not the least of which because I&#39;ll be the only operator for the
foreseeable future and I&#39;m obviously an idiot.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;It looks like
&lt;a href=&#34;https://github.com/rust-lang/cargo/issues/9406&#34;&gt;cargo/#9406&lt;/a&gt; will
make this unnecessary.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Challenges of BPF Tracing Go</title>
      <link>https://blog.0x74696d.com/posts/challenges-of-bpf-tracing-go/</link>
      <pubDate>Sat, 28 Aug 2021 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/challenges-of-bpf-tracing-go/</guid>
      <description>&lt;p&gt;Folks are rightfully excited about the performance benefits to Go
1.17&#39;s changes to function calling convention, but I was a little
disappointed to discover it doesn&#39;t make BPF &lt;code&gt;uretprobe&lt;/code&gt;s possible. As
it turns out, I hadn&#39;t fully considered how Go&#39;s relocatable stacks
complicate the situation.&lt;/p&gt;
&lt;p&gt;One of the advantages of Go&#39;s fast compile times is that &amp;quot;printf
debugging&amp;quot; gets you pretty far. You know the problem is somewhere
around a particular variable, so you drop in a &lt;code&gt;fmt.Printf&lt;/code&gt; or
&lt;code&gt;log.Debug&lt;/code&gt; or
&lt;a href=&#34;https://pkg.go.dev/github.com/davecgh/go-spew&#34;&gt;&lt;code&gt;spew.Dump&lt;/code&gt;&lt;/a&gt; to
inspect the value at the point of interest. But I often work on
stateful systems, and in that environment this approach can be
limited. Recompiling for a new log statement and restarting may mean
losing the state that caused the problem, and logging can introduce
timing artifacts that obscure the bug. In those circumstances I reach
for BPF tools and in particular
&lt;a href=&#34;https://github.com/iovisor/bpftrace/&#34;&gt;&lt;code&gt;bpftrace&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the more powerful features of BPF for application developers is
user-level dynamic function instrumentation, implemented by &lt;code&gt;uprobe&lt;/code&gt;
and &lt;code&gt;uretprobe&lt;/code&gt;. A &lt;code&gt;uprobe&lt;/code&gt; inserts a BPF probe at the point where a
function is called, and the &lt;code&gt;uretprobe&lt;/code&gt; inserts a probe where the
function returns.&lt;/p&gt;
&lt;p&gt;As a quick example, here&#39;s a function written in C:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;font-weight:bold&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;font-weight:bold&#34;&gt;int&lt;/span&gt; b) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; a+b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here&#39;s a &lt;code&gt;bpftrace&lt;/code&gt; program that prints the program&#39;s arguments
and return value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-awk&#34; data-lang=&#34;awk&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;#!/usr/bin/env bpftrace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./sum&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;sum&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;args: %d + %d\n&amp;#34;&lt;/span&gt;, arg0, arg1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uretprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./sum&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;sum&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;result: %d\n&amp;#34;&lt;/span&gt;, reg(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;ax&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we run the &lt;code&gt;bpftrace&lt;/code&gt; script, it&#39;ll pause waiting for us to run the
C program in another terminal, and then print the outputs:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo ./sum.bt
Attaching 2 probes...
args: 2 + 3
result: 5
^C
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is incredibly powerful for stateful applications because you can
attach these probes to a running program without recompiling it and
generally without impacting performance. This idea was pioneered in
&lt;a href=&#34;http://dtrace.org/blogs/about/&#34;&gt;DTrace&lt;/a&gt; and BPF brings this kind of
observability to Linux.&lt;/p&gt;
&lt;p&gt;But Go&#39;s calling convention prior to Go 1.17 complicates tracing. In
the &lt;a href=&#34;https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI&#34;&gt;System V AMD64 calling
convention&lt;/a&gt;,
arguments are mostly passed in registers and return values are
returned in registers. BPF tools assume that compilers follow that
convention, but Go did not. Instead, Go followed the Plan9 calling
convention and passed arguments on the stack. Return values were
returned by popping off the stack.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;uprobe&lt;/code&gt;s this means we can&#39;t use the &lt;code&gt;arg&lt;/code&gt; field that reads the
arguments out of the CPU registers expected by the AMD64 calling
convention. Instead we need to get them off the stack. This is mildly
annoying because you need to get the stack pointer, bump it to the
argument address, and then read the memory at that address. In
&lt;code&gt;bpftrace&lt;/code&gt; 0.9.3 these are exposed as
&lt;a href=&#34;https://github.com/iovisor/bpftrace/issues/740&#34;&gt;&lt;code&gt;sargX&lt;/code&gt;&lt;/a&gt; convenience
aliases, so this isn&#39;t too terrible.&lt;/p&gt;
&lt;p&gt;The situation for &lt;code&gt;uretprobe&lt;/code&gt;s is much worse. Instead of using a
thread for every goroutine, Go multiplexes goroutines across multiple
threads (&amp;quot;M:N scheduling&amp;quot;). So instead of each thread having a default
2MB stack, each goroutine has a tiny 2KB stack that&#39;s managed by the
runtime instead of the operating system. When the program needs to
grow the stack for a goroutine and there&#39;s not enough room, the
runtime copies the entire goroutine&#39;s stack to another place in memory
where it has enough room to expand.&lt;/p&gt;
&lt;p&gt;When you configure a
&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.8/kernel/events/uprobes.c#L1861-L1925&#34;&gt;&lt;code&gt;uretprobe&lt;/code&gt;&lt;/a&gt;,
the kernel also creates a &lt;code&gt;uprobe&lt;/code&gt; with a return probe handler. When
that &lt;code&gt;uprobe&lt;/code&gt; is hit, it hijacks the return address of the probed
function and replaces it with the address of a &amp;quot;trampoline&amp;quot; with the
breakpoint.&lt;/p&gt;
&lt;p&gt;But if the address has been moved by the time we hit it, the return
locations are no longer valid, and so a &lt;code&gt;uretprobe&lt;/code&gt; that fires reads
into memory used somewhere else. This crashes the program!&lt;/p&gt;
&lt;p&gt;To work around this, you can trace the function call from the
function&#39;s entry point with a &lt;code&gt;uprobe&lt;/code&gt;, and then offset from there to
each return point of the function. This is incredibly gross and
involves disassembling the binary.&lt;/p&gt;
&lt;p&gt;You probably don&#39;t spend your day looking at assembly and I sure as
heck don&#39;t either! So let&#39;s take a quick detour into reading
disassembled functions in go. Suppose this is our program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;swap&lt;/span&gt;(x, y &lt;span style=&#34;font-weight:bold&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;font-weight:bold&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;font-weight:bold&#34;&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; y, x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	args := os.Args
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(args) &amp;lt; 3 {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;panic&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;needs 2 args&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	a, b := &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;swap&lt;/span&gt;(args[1], args[2])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Println&lt;/span&gt;(a, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because this program is trivial, Go will inline the &lt;code&gt;swap&lt;/code&gt; function,
so for purposes of illustration we&#39;re going to compile it with &lt;code&gt;go build -gcflags &#39;-l&#39; -o swapper .&lt;/code&gt; to disable inlining.&lt;/p&gt;
&lt;p&gt;First we&#39;ll disassemble the function in GDB. You could also do this in
&lt;code&gt;objdump&lt;/code&gt; but we&#39;re going to want to poke around a bit here.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gdb --args ./swapper hello go
...
Reading symbols from ./swapper...
Loading Go Runtime support.
(gdb) b main.swap
Breakpoint 1 at 0x497800: file /home/tim/swapper/main.go, line 9
.
(gdb) run
Starting program: /home/tim/swapper/swapper hello world
[New LWP 3413956]
[New LWP 3413957]
[New LWP 3413958]
[New LWP 3413959]
[New LWP 3413960]

Thread 1 &amp;#34;swapper&amp;#34; hit Breakpoint 1, main.swap (x=..., y=..., ~r2=..., ~r3=...)
    at /home/tim/swapper/main.go:9
9               return y, x
(gdb) disas
Dump of assembler code for function main.swap:
=&amp;gt; 0x0000000000497800 &amp;lt;+0&amp;gt;:     mov    rax,QWORD PTR [rsp+0x18]
   0x0000000000497805 &amp;lt;+5&amp;gt;:     mov    QWORD PTR [rsp+0x28],rax
   0x000000000049780a &amp;lt;+10&amp;gt;:    mov    rax,QWORD PTR [rsp+0x20]
   0x000000000049780f &amp;lt;+15&amp;gt;:    mov    QWORD PTR [rsp+0x30],rax
   0x0000000000497814 &amp;lt;+20&amp;gt;:    mov    rax,QWORD PTR [rsp+0x8]
   0x0000000000497819 &amp;lt;+25&amp;gt;:    mov    QWORD PTR [rsp+0x38],rax
   0x000000000049781e &amp;lt;+30&amp;gt;:    mov    rax,QWORD PTR [rsp+0x10]
   0x0000000000497823 &amp;lt;+35&amp;gt;:    mov    QWORD PTR [rsp+0x40],rax
   0x0000000000497828 &amp;lt;+40&amp;gt;:    ret
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From a high-level view, we have 4 pointers to move: each string has a
length and a sequence of bytes, and there are two strings. The
function rearranges the pointers on the stack, and when we return
these values will be popped off the stack.&lt;/p&gt;
&lt;p&gt;The first instruction is to move whatever is offset 0x18 from the
stack pointer (&lt;code&gt;rsp&lt;/code&gt;) to the scratch register &lt;code&gt;rax&lt;/code&gt;. Let&#39;s e&lt;code&gt;x&lt;/code&gt;amine
that &lt;code&gt;a&lt;/code&gt;ddress and then see if it&#39;s a readable &lt;code&gt;s&lt;/code&gt;tring:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) x/a $rsp+0x18
0xc00011af18:   0x7fffffffddcd
(gdb) x/s 0x7fffffffddcd
0x7fffffffddcd: &amp;#34;go&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Cool! So that first instruction means we&#39;re moving the 64-bit pointer
(&lt;code&gt;QWORD PTR&lt;/code&gt;) that points to the string&#39;s contents into the scratch
register. The next instruction moves the same pointer out of the
scratch space to the top of the stack (&lt;code&gt;rsp+0x28&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The next instruction moves whatever is at offset 0x20 into the scratch
space. This is an integer: the length of our string!&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) x/a $rsp+0x20
0xc00011af20:   0x2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That gets moved out of scratch space and onto the top of the stack as
well (&lt;code&gt;rsp+0x30&lt;/code&gt;). The next 4 instructions repeat the same thing with
our other two arguments:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) x/a $rsp+0x8
0xc00011af08:   0x7fffffffddc7
(gdb) x/s 0x7fffffffddc7
0x7fffffffddc7: &amp;#34;hello&amp;#34;

(gdb) x/a $rsp+0x10
0xc00011af10:   0x5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can &lt;code&gt;si&lt;/code&gt;ngle step through 8 times until we hit the &lt;code&gt;ret&lt;/code&gt;urn:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
(gdb) si
0x0000000000497828 in main.swap (x=..., y=..., ~r2=..., ~r3=...)
    at /home/tim/swapper/main.go:9
9               return y, x
(gdb) disas
Dump of assembler code for function main.swap:
   0x0000000000497800 &amp;lt;+0&amp;gt;:     mov    rax,QWORD PTR [rsp+0x18]
   0x0000000000497805 &amp;lt;+5&amp;gt;:     mov    QWORD PTR [rsp+0x28],rax
   0x000000000049780a &amp;lt;+10&amp;gt;:    mov    rax,QWORD PTR [rsp+0x20]
   0x000000000049780f &amp;lt;+15&amp;gt;:    mov    QWORD PTR [rsp+0x30],rax
   0x0000000000497814 &amp;lt;+20&amp;gt;:    mov    rax,QWORD PTR [rsp+0x8]
   0x0000000000497819 &amp;lt;+25&amp;gt;:    mov    QWORD PTR [rsp+0x38],rax
   0x000000000049781e &amp;lt;+30&amp;gt;:    mov    rax,QWORD PTR [rsp+0x10]
   0x0000000000497823 &amp;lt;+35&amp;gt;:    mov    QWORD PTR [rsp+0x40],rax
=&amp;gt; 0x0000000000497828 &amp;lt;+40&amp;gt;:    ret
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The function has done all it&#39;s work and we&#39;re at the point where it&#39;s
going to return to the caller. Now we can examine the memory addresses
at the top of the stack:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) x/a $rsp+0x40
0xc00011af40:   0x5
(gdb) x/a $rsp+0x38
0xc00011af38:   0x7fffffffddc7
(gdb) x/s  0x7fffffffddc7
0x7fffffffddc7: &amp;#34;hello&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, we can see we&#39;ve moved our outputs into pointers offset
from the stack pointer, that point to our strings. These are on the
stack so it&#39;s last-in-first-out, which is admittedly a little extra
confusing here because the function&#39;s purpose is to swap the
strings.&lt;/p&gt;
&lt;p&gt;If you&#39;re anything like me, you&#39;ll want a picture here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.0x74696d.com/images/20210828/stack.svg&#34; alt=&#34;diagram of the stack, showing the contents of the bottom of the stack being swapped as they are moved to the top of the stack&#34;&gt;&lt;/p&gt;
&lt;p&gt;How do we apply what we&#39;ve just learned to BPF?&lt;/p&gt;
&lt;p&gt;First, we now know that although the Go function has 2 arguments,
there are actually 4 arguments on the stack. So we&#39;ll need to grab two
pairs of stack args. We can print them correctly using the &lt;code&gt;str&lt;/code&gt;
function of &lt;code&gt;bpftrace&lt;/code&gt;: &lt;code&gt;str(sarg0, sarg1)&lt;/code&gt; for &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;str(sarg2, sarg3)&lt;/code&gt; for &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, although a &lt;code&gt;uretprobe&lt;/code&gt; won&#39;t work, we can simulate one by adding
a &lt;code&gt;uprobe&lt;/code&gt; that points to the offset of the return instruction. If you
look at the assembly again we see that&#39;s at &lt;code&gt;+40&lt;/code&gt; so the &lt;code&gt;uprobe&lt;/code&gt;
filter looks like &lt;code&gt;uprobe:./bin/swapper:&amp;quot;main.swap&amp;quot;+40&lt;/code&gt;. When we hit
the probe, we can&#39;t simply look in return registers, but we need to
examine the stack pointer offsets we found for each argument
above. The final &lt;code&gt;bpftrace&lt;/code&gt; program looks like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-awk&#34; data-lang=&#34;awk&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;#!/usr/bin/env bpftrace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./swapper&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;main.swap&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;swapping \&amp;#34;%s\&amp;#34; and \&amp;#34;%s\&amp;#34;\n&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        str(sarg0, sarg1), str(sarg2, sarg3));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./swapper&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;main.swap&amp;#34;&lt;/span&gt;+40
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;results: \&amp;#34;%s\&amp;#34; and \&amp;#34;%s\&amp;#34;\n&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        str(*(reg(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;sp&amp;#34;&lt;/span&gt;)+0x28), *(reg(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;sp&amp;#34;&lt;/span&gt;)+0x30)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        str(*(reg(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;sp&amp;#34;&lt;/span&gt;)+0x38), *(reg(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;sp&amp;#34;&lt;/span&gt;)+0x40))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We run this program in one terminal while running &lt;code&gt;./swapper hello world&lt;/code&gt; in another terminal:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo ./swapper.bt
Attaching 2 probes...
swapping &amp;#34;hello&amp;#34; and &amp;#34;go&amp;#34;
results: &amp;#34;go&amp;#34; and &amp;#34;hello&amp;#34;
^C
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, that&#39;s kind of a lot of work to do just for one return
probe. And if our function has multiple return points, we have to do
this for every one of them!&lt;/p&gt;
&lt;p&gt;For a complex function like Nomad&#39;s FSM
&lt;a href=&#34;https://github.com/hashicorp/nomad/blob/v1.1.4/nomad/fsm.go#L193-L322&#34;&gt;&lt;code&gt;Apply&lt;/code&gt;&lt;/a&gt;
method, I&#39;ve had to lean on hideous tricks like generating a
&lt;code&gt;bpftrace&lt;/code&gt; program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;#!/usr/bin/env bpftrace
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;Get Nomad FSM.Apply latency
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;Note: using sarg with offsets isn&amp;#39;t really concurrency safe and emits a warning
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;*/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;base&lt;/span&gt;=&lt;span style=&#34;font-weight:bold&#34;&gt;$(&lt;/span&gt;objdump --disassemble=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;               -Mintel -S ./bin/nomad &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;               | awk &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;/hashicorp/{print $1}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;               | head -1&lt;span style=&#34;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objdump --disassemble=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;        -Mintel -S ./bin/nomad &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;        | awk -F&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39; |:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;/ret/{print $2}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;        | xargs -I % &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;        python3 -c &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;print(&amp;#39;uprobe:./bin/nomad:\&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply\&amp;#34;+&amp;#39; + hex(0x% - 0x&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$base&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;print(&amp;#39;{&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;print(&amp;#39;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;print(&amp;#39;  delete(@start[str(*sarg1)]);&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;print(&amp;#39;}&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;print(&amp;#39;&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which results in the following 300 line monstrosity:&lt;/p&gt;
&lt;details&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-awk&#34; data-lang=&#34;awk&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;#!/usr/bin/env bpftrace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;/*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Get Nomad FSM.Apply latency
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Note&lt;span style=&#34;&#34;&gt;:&lt;/span&gt; using sarg with offsets isn&lt;span style=&#34;&#34;&gt;&amp;#39;&lt;/span&gt;t really concurrency safe &lt;span style=&#34;font-weight:bold&#34;&gt;and&lt;/span&gt; emits a warning
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*&lt;span style=&#34;&#34;&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x1d3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x257
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x2f3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x377
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x3fb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x49b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x51b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x5a0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x634
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x6b4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x738
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x7e7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x86e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x8ee
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x982
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0xa06
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0xa8e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0xb27
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0xbae
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0xc2e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0xcc2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0xd46
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0xdce
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0xe77
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0xefb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0xf80
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x1014
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x1098
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x111c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x11b7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x123b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x12c0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x1350
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x13d0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x1450
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x14f7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x1577
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x15f7
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x168f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x170f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x178f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x18ca
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x1948
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x19ce
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x1a52
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x1a6d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x1b07
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x1b87
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./bin/nomad&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;github.com/hashicorp/nomad/nomad.(*nomadFSM).Apply&amp;#34;&lt;/span&gt;+0x1c0e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @usecs = hist((nsecs - @start[str(*sarg1)]) / 1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;delete&lt;/span&gt;(@start[str(*sarg1)]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;The new calling convention in Go 1.17 changes this situation for the
better, but leaves us short of working &lt;code&gt;uretprobe&lt;/code&gt;s. Our same &lt;code&gt;swapper&lt;/code&gt;
program compiled with Go 1.17 disassembles into the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) disas
Dump of assembler code for function main.swap:
=&amp;gt; 0x000000000047e260 &amp;lt;+0&amp;gt;:     mov    QWORD PTR [rsp+0x8],rax
   0x000000000047e265 &amp;lt;+5&amp;gt;:     mov    QWORD PTR [rsp+0x18],rcx
   0x000000000047e26a &amp;lt;+10&amp;gt;:    mov    rdx,rax
   0x000000000047e26d &amp;lt;+13&amp;gt;:    mov    rax,rcx
   0x000000000047e270 &amp;lt;+16&amp;gt;:    mov    rsi,rbx
   0x000000000047e273 &amp;lt;+19&amp;gt;:    mov    rbx,rdi
   0x000000000047e276 &amp;lt;+22&amp;gt;:    mov    rcx,rdx
   0x000000000047e279 &amp;lt;+25&amp;gt;:    mov    rdi,rsi
   0x000000000047e27c &amp;lt;+28&amp;gt;:    ret
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Everything is now in the argument registers, and with less pointer
indirection:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) x/s $rax
0x7fffffffddca: &amp;#34;hello&amp;#34;
(gdb) i r $rbx
rbx            0x5                 5
(gdb) x/s $rcx
0x7fffffffddd0: &amp;#34;go&amp;#34;
(gdb) i r $rdi
rdi            0x2                 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(I&#39;m honestly not sure why the second argument&#39;s length shows up in
&lt;code&gt;rdi&lt;/code&gt; rather than &lt;code&gt;rdx&lt;/code&gt;, so if you know I&#39;d love to hear why!)&lt;/p&gt;
&lt;p&gt;The return values also get placed into the registers, which means we
&lt;em&gt;should&lt;/em&gt; now be able to use a &lt;code&gt;uretprobe&lt;/code&gt; to get the values out of
them. Our &lt;code&gt;bpftrace&lt;/code&gt; program becomes much simpler:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-awk&#34; data-lang=&#34;awk&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;#!/usr/bin/env bpftrace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./swapper&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;main.swap&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;swapping \&amp;#34;%s\&amp;#34; and \&amp;#34;%s\&amp;#34;\n&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      str(reg(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;ax&amp;#34;&lt;/span&gt;)), str(reg(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;cx&amp;#34;&lt;/span&gt;)));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uretprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./swapper&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;main.swap&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;results: \&amp;#34;%s\&amp;#34; and \&amp;#34;%s\&amp;#34;\n&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      str(reg(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;ax&amp;#34;&lt;/span&gt;)), str(reg(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;cx&amp;#34;&lt;/span&gt;)));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo ./swapper.bt
Attaching 2 probes...
swapping &amp;#34;hello&amp;#34; and &amp;#34;go&amp;#34;
results: &amp;#34;go&amp;#34; and &amp;#34;hello&amp;#34;
^C
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So what&#39;s the problem? Isn&#39;t this great? Well so far all the programs
we&#39;ve looked at haven&#39;t allocated enough on the stack for the runtime
to resize it. This is where the &lt;code&gt;uretprobe&lt;/code&gt; falls down.&lt;/p&gt;
&lt;p&gt;Take a look at the following program. The &lt;code&gt;temp&lt;/code&gt; variable never
escapes onto the heap (we can verify this by passing &lt;code&gt;-gcflags -m&lt;/code&gt; to
the compiler), so we allocate &lt;code&gt;sizeof(Example) * count&lt;/code&gt; on the
goroutine stack. If we run this with &lt;code&gt;./stacker 1000000&lt;/code&gt; we&#39;ll
allocate more than is available and the Go runtime will move the
stack.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;strconv&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;type&lt;/span&gt; Example &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	ID   &lt;span style=&#34;font-weight:bold&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Name &lt;span style=&#34;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;stacker&lt;/span&gt;(count &lt;span style=&#34;font-weight:bold&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;font-weight:bold&#34;&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;var&lt;/span&gt; result &lt;span style=&#34;font-weight:bold&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; i := 0; i &amp;lt; count; i++ {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		temp := Example{ID: i * 2, Name: fmt.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, result)}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		result += temp.ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	s := fmt.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;hello: %d&amp;#34;&lt;/span&gt;, result)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	args := os.Args
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;len&lt;/span&gt;(args) &amp;lt; 2 {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;panic&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;needs 1 arg&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	count, err := strconv.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Atoi&lt;/span&gt;(args[1])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;panic&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;arg needs to be a number&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	s := &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;stacker&lt;/span&gt;(count)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Println&lt;/span&gt;(s)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&#39;s our &lt;code&gt;bpftrace&lt;/code&gt; program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-awk&#34; data-lang=&#34;awk&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;#!/usr/bin/env bpftrace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uretprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./stacker&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;main.stacker&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;result: \&amp;#34;%s\&amp;#34;\n&amp;#34;&lt;/span&gt;, str(reg(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;ax&amp;#34;&lt;/span&gt;)));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But if we run &lt;code&gt;stacker&lt;/code&gt; with a sufficiently large &lt;code&gt;count&lt;/code&gt; while our
&lt;code&gt;uretprobe&lt;/code&gt; is attached, it will crash!&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./stacker 1000000
runtime: unexpected return pc for main.stacker called from 0x7fffffffe000
stack: frame={sp:0xc000074ef0, fp:0xc000074f48} stack=[0xc000074000,0xc000075000)
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here&#39;s the full dump if you&#39;re into that kind of thing:&lt;/p&gt;
&lt;details&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./stacker 1000000
runtime: unexpected return pc for main.stacker called from 0x7fffffffe000
stack: frame={sp:0xc000074ef0, fp:0xc000074f48} stack=[0xc000074000,0xc000075000)
0x000000c000074df0:  0x0000000000000002  0x000000c000508100
0x000000c000074e00:  0x000000c000508000  0x00000000004672e0 &amp;lt;sync.(*Pool).pinSlowÂ·dwrapÂ·3+0x0000000000000000&amp;gt;
0x000000c000074e10:  0x0000000000557f58  0x000000c000074e08
0x000000c000074e20:  0x0000000000419860 &amp;lt;runtime.gcAssistAlloc.func1+0x0000000000000000&amp;gt;  0x000000c0000001a0
0x000000c000074e30:  0x0000000000010000  0x000000c000074eb8
0x000000c000074e40:  0x000000000040b305 &amp;lt;runtime.mallocgc+0x0000000000000125&amp;gt;  0x000000c0000001a0
0x000000c000074e50:  0x0000000000000002  0x000000c000074e88
0x000000c000074e60:  0x000000c000074e88  0x000000000047a06a &amp;lt;fmt.(*pp).free+0x00000000000000ca&amp;gt;
0x000000c000074e70:  0x0000000000522100  0x00000000004938e0
0x000000c000074e80:  0x000000c00007a820  0x000000c000074ee0
0x000000c000074e90:  0x000000000047a245 &amp;lt;fmt.Sprintf+0x0000000000000085&amp;gt;  0x000000c00007a820
0x000000c000074ea0:  0x000000c00012b230  0x000000000000000b
0x000000c000074eb0:  0x000000c0000001a0  0x000000c000074ee0
0x000000c000074ec0:  0x00000000004095e5 &amp;lt;runtime.convT64+0x0000000000000045&amp;gt;  0x0000000000000008
0x000000c000074ed0:  0x0000000000487ee0  0x000000c00007a800
0x000000c000074ee0:  0x000000c000074f38  0x0000000000480d7b &amp;lt;main.stacker+0x000000000000003b&amp;gt;
0x000000c000074ef0: &amp;lt;0x0000000644e0732a  0x0000000000000002
0x000000c000074f00:  0x000000c000074f28  0x0000000000000001
0x000000c000074f10:  0x0000000000000001  0x0000000644e0732a
0x000000c000074f20:  0x00000000000280fa  0x0000000000000000
0x000000c000074f30:  0x0000000000000000  0x000000c000074f70
0x000000c000074f40: !0x00007fffffffe000 &amp;gt;0x00000000000f4240
0x000000c000074f50:  0x0000000000000007  0x0000000000415d45 &amp;lt;runtime.gcenable+0x0000000000000085&amp;gt;
0x000000c000074f60:  0x00000000004873a0  0x000000c0000001a0
0x000000c000074f70:  0x000000c000074fd0  0x0000000000432047 &amp;lt;runtime.main+0x0000000000000227&amp;gt;
0x000000c000074f80:  0x000000c000022060  0x0000000000000000
0x000000c000074f90:  0x0000000000000000  0x0000000000000000
0x000000c000074fa0:  0x0100000000000000  0x0000000000000000
0x000000c000074fb0:  0x000000c0000001a0  0x0000000000432180 &amp;lt;runtime.main.func2+0x0000000000000000&amp;gt;
0x000000c000074fc0:  0x000000c000074fa6  0x000000c000074fb8
0x000000c000074fd0:  0x0000000000000000  0x000000000045ab01 &amp;lt;runtime.goexit+0x0000000000000001&amp;gt;
0x000000c000074fe0:  0x0000000000000000  0x0000000000000000
0x000000c000074ff0:  0x0000000000000000  0x0000000000000000
fatal error: unknown caller pc

runtime stack:
runtime.throw({0x4988ba, 0x516760})
        /usr/local/go/src/runtime/panic.go:1198 +0x71
runtime.gentraceback(0x400, 0x400, 0x80, 0x7f73bbffafff, 0x0, 0x0, 0x7fffffff, 0x7ffc46fe0e28, 0x7f73bbe23200, 0x0)
        /usr/local/go/src/runtime/traceback.go:274 +0x1956
runtime.scanstack(0xc0000001a0, 0xc000030698)
        /usr/local/go/src/runtime/mgcmark.go:748 +0x197
runtime.markroot.func1()
        /usr/local/go/src/runtime/mgcmark.go:232 +0xb1
runtime.markroot(0xc000030698, 0x14)
        /usr/local/go/src/runtime/mgcmark.go:205 +0x170
runtime.gcDrainN(0xc000030698, 0x10000)
        /usr/local/go/src/runtime/mgcmark.go:1134 +0x14b
runtime.gcAssistAlloc1(0xc0000001a0, 0xc000074b58)
        /usr/local/go/src/runtime/mgcmark.go:537 +0xef
runtime.gcAssistAlloc.func1()
        /usr/local/go/src/runtime/mgcmark.go:448 +0x25
runtime.systemstack()
        /usr/local/go/src/runtime/asm_amd64.s:383 +0x49

goroutine 1 [GC assist marking (scan)]:
runtime.systemstack_switch()
        /usr/local/go/src/runtime/asm_amd64.s:350 fp=0xc000074de8 sp=0xc000074de0 pc=0x458a20
runtime.gcAssistAlloc(0xc0000001a0)
        /usr/local/go/src/runtime/mgcmark.go:447 +0x18b fp=0xc000074e48 sp=0xc000074de8 pc=0x41974b
runtime.mallocgc(0x8, 0x487ee0, 0x0)
        /usr/local/go/src/runtime/malloc.go:959 +0x125 fp=0xc000074ec8 sp=0xc000074e48 pc=0x40b305
runtime.convT64(0x644e0732a)
        /usr/local/go/src/runtime/iface.go:364 +0x45 fp=0xc000074ef0 sp=0xc000074ec8 pc=0x4095e5
runtime: unexpected return pc for main.stacker called from 0x7fffffffe000
stack: frame={sp:0xc000074ef0, fp:0xc000074f48} stack=[0xc000074000,0xc000075000)
0x000000c000074df0:  0x0000000000000002  0x000000c000508100
0x000000c000074e00:  0x000000c000508000  0x00000000004672e0 &amp;lt;sync.(*Pool).pinSlowÂ·dwrapÂ·3+0x0000000000000000&amp;gt;
0x000000c000074e10:  0x0000000000557f58  0x000000c000074e08
0x000000c000074e20:  0x0000000000419860 &amp;lt;runtime.gcAssistAlloc.func1+0x0000000000000000&amp;gt;  0x000000c0000001a0
0x000000c000074e30:  0x0000000000010000  0x000000c000074eb8
0x000000c000074e40:  0x000000000040b305 &amp;lt;runtime.mallocgc+0x0000000000000125&amp;gt;  0x000000c0000001a0
0x000000c000074e50:  0x0000000000000002  0x000000c000074e88
0x000000c000074e60:  0x000000c000074e88  0x000000000047a06a &amp;lt;fmt.(*pp).free+0x00000000000000ca&amp;gt;
0x000000c000074e70:  0x0000000000522100  0x00000000004938e0
0x000000c000074e80:  0x000000c00007a820  0x000000c000074ee0
0x000000c000074e90:  0x000000000047a245 &amp;lt;fmt.Sprintf+0x0000000000000085&amp;gt;  0x000000c00007a820
0x000000c000074ea0:  0x000000c00012b230  0x000000000000000b
0x000000c000074eb0:  0x000000c0000001a0  0x000000c000074ee0
0x000000c000074ec0:  0x00000000004095e5 &amp;lt;runtime.convT64+0x0000000000000045&amp;gt;  0x0000000000000008
0x000000c000074ed0:  0x0000000000487ee0  0x000000c00007a800
0x000000c000074ee0:  0x000000c000074f38  0x0000000000480d7b &amp;lt;main.stacker+0x000000000000003b&amp;gt;
0x000000c000074ef0: &amp;lt;0x0000000644e0732a  0x0000000000000002
0x000000c000074f00:  0x000000c000074f28  0x0000000000000001
0x000000c000074f10:  0x0000000000000001  0x0000000644e0732a
0x000000c000074f20:  0x00000000000280fa  0x0000000000000000
0x000000c000074f30:  0x0000000000000000  0x000000c000074f70
0x000000c000074f40: !0x00007fffffffe000 &amp;gt;0x00000000000f4240
0x000000c000074f50:  0x0000000000000007  0x0000000000415d45 &amp;lt;runtime.gcenable+0x0000000000000085&amp;gt;
0x000000c000074f60:  0x00000000004873a0  0x000000c0000001a0
0x000000c000074f70:  0x000000c000074fd0  0x0000000000432047 &amp;lt;runtime.main+0x0000000000000227&amp;gt;
0x000000c000074f80:  0x000000c000022060  0x0000000000000000
0x000000c000074f90:  0x0000000000000000  0x0000000000000000
0x000000c000074fa0:  0x0100000000000000  0x0000000000000000
0x000000c000074fb0:  0x000000c0000001a0  0x0000000000432180 &amp;lt;runtime.main.func2+0x0000000000000000&amp;gt;
0x000000c000074fc0:  0x000000c000074fa6  0x000000c000074fb8
0x000000c000074fd0:  0x0000000000000000  0x000000000045ab01 &amp;lt;runtime.goexit+0x0000000000000001&amp;gt;
0x000000c000074fe0:  0x0000000000000000  0x0000000000000000
0x000000c000074ff0:  0x0000000000000000  0x0000000000000000
main.stacker(0xf4240)
        /home/tim/stacker/main.go:17 +0x3b fp=0xc000074f48 sp=0xc000074ef0 pc=0x480d7b
&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;
&lt;p&gt;Instead, we still have to use the &lt;code&gt;uprobe&lt;/code&gt; + offset technique we saw
above. This &lt;code&gt;bpftrace&lt;/code&gt; program works safely, but the address offset is
going to vary depending on which version of Go you&#39;re using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-awk&#34; data-lang=&#34;awk&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;#!/usr/bin/env bpftrace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uprobe&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;./stacker&lt;span style=&#34;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;main.stacker&amp;#34;&lt;/span&gt;+213
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;result: \&amp;#34;%s\&amp;#34;\n&amp;#34;&lt;/span&gt;, str(reg(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;ax&amp;#34;&lt;/span&gt;)));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This problem is probably not going to be fixed from the Go runtime
side, because the relocatable stack is baked into the whole memory
model for goroutines. But with &lt;code&gt;uprobes&lt;/code&gt; and a little inventiveness,
you can get most of the same functionality.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Networking for a Firecracker Lab</title>
      <link>https://blog.0x74696d.com/posts/networking-firecracker-lab/</link>
      <pubDate>Tue, 27 Jul 2021 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/networking-firecracker-lab/</guid>
      <description>&lt;p&gt;Several of my personal projects require creating and destroying a lot
of virtual machines, so I&#39;ve started porting them over from QEMU to
&lt;a href=&#34;https://firecracker-microvm.github.io/&#34;&gt;Firecracker&lt;/a&gt; to speed up
development. I&#39;m now at the point where I need to make some of these
VMs accessible from the internet and other machines on the LAN. My
scenario is that I have three physical machines (2 NUCs and my
development laptop) that act as virtual machine hosts. Some of them
are currently running services on QEMU virtual machines, which I
intend to migrate over to Firecracker eventually but I don&#39;t want a
flag day for migration.&lt;/p&gt;
&lt;p&gt;The obvious question given that I was a
&lt;a href=&#34;https://www.nomadproject.io/&#34;&gt;Nomad&lt;/a&gt; maintainer is why I wouldn&#39;t use
a Nomad &lt;a href=&#34;https://github.com/cneira/firecracker-task-driver&#34;&gt;Firecracker task
driver&lt;/a&gt;, but it
turns out I&#39;m not running a Nomad cluster across these machines. The
NUCs are powered off most of the day; if I happen to need them I fire
a wake-on-LAN to boot them and wait for their services to come
up. Nomad&#39;s control plane doesn&#39;t tolerate having peers offline for
extended periods of time, so it&#39;s just the wrong use case for this
home lab.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gruchalski.com/about/&#34;&gt;Radek Gruchalski&lt;/a&gt; has a great series
(&lt;a href=&#34;https://gruchalski.com/posts/2021-02-06-taking-firecracker-for-a-spin/&#34;&gt;I&lt;/a&gt;,
&lt;a href=&#34;https://gruchalski.com/posts/2021-02-07-vault-on-firecracker-with-cni-plugins-and-nomad/&#34;&gt;II&lt;/a&gt;,
&lt;a href=&#34;https://gruchalski.com/posts/2021-02-17-bridging-the-firecracker-network-gap/&#34;&gt;III&lt;/a&gt;)
where he explores Firecracker, tries it out with Nomad and CNI, and
gets bridge networking going after forking
&lt;a href=&#34;https://github.com/firecracker-microvm/firectl&#34;&gt;&lt;code&gt;firectl&lt;/code&gt;&lt;/a&gt;. Gruchalski&#39;s
approach builds on top of a
&lt;a href=&#34;https://jvns.ca/blog/2021/01/23/firecracker--start-a-vm-in-less-than-a-second/&#34;&gt;post&lt;/a&gt;
by the always-delightful Julia Evans
(&lt;a href=&#34;https://twitter.com/b0rk&#34;&gt;@b0rk&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Evans configures the networking of the VM guests by passing boot
arguments (TIL! See also this section from the &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/networking_guide/sec-configuring_ip_networking_from_the_kernel_command_line&#34;&gt;RHEL networking
guide&lt;/a&gt;),
and creates the tuntap device in her script. Gruchalski instead uses
&lt;a href=&#34;https://www.cni.dev/&#34;&gt;Container Network Interface (CNI)&lt;/a&gt; plugins to
create a bridge network, assign an IP, and create the required tuntap
device via the
&lt;a href=&#34;https://github.com/awslabs/tc-redirect-tap&#34;&gt;&lt;code&gt;tc-redirect-tap&lt;/code&gt;&lt;/a&gt;
plugin. Two areas where my requirements are different are the jailer
and persistent IP addressing.&lt;/p&gt;
&lt;p&gt;Because I may end up with some VMs exposed to the internet, I want to
tighten up their isolation using the
&lt;a href=&#34;https://github.com/firecracker-microvm/firecracker/blob/main/docs/jailer.md&#34;&gt;jailer&lt;/a&gt;. The
jailer runs in a network namespace and containerizes itself by
unsharing its PID namespace and running in a pivot root. (That&#39;s
right, it&#39;s a VM running in a container!)&lt;/p&gt;
&lt;p&gt;I&#39;d like for VM IPs to be persistent so that I can register DNS
entries for their services and set up any forwarding rules I need at
the router. These need to persist across reboots of the underlying
host.&lt;/p&gt;
&lt;p&gt;So I built on top of Evans&#39; and Gruchalski&#39;s approaches by adding
support for the jailer and ensuring that I can have persistent IP
addresses, and of course the extra bits that need to happen to make
these IPs routable on my LAN. I wrapped this all up in a control
script I&#39;m calling
&lt;a href=&#34;https://gist.github.com/tgross/8aa33b65cba1850ebe430f33fafd6e41&#34;&gt;&lt;code&gt;vmctl&lt;/code&gt;&lt;/a&gt;
which gets invoked as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vmctl create --id &lt;span style=&#34;font-weight:bold&#34;&gt;$(&lt;/span&gt;uuidgen&lt;span style=&#34;font-weight:bold&#34;&gt;)&lt;/span&gt; --template ./vmconfigs/example.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates a network namespace named after the &lt;code&gt;$id&lt;/code&gt; and runs the
CNI plugins to allocate an IP address from the network bridge and
create a tuntap device. The output from CNI gets saved as a JSON file
to disk, so that if we run &lt;code&gt;vmctl create&lt;/code&gt; again with the same &lt;code&gt;$id&lt;/code&gt; we
can look for that file, skip creating the network, and reuse the same
IP address. Next &lt;code&gt;vmctl&lt;/code&gt; creates a chroot containing the kernel and
root filesystem for the VM, and starts up the jailer. The jailer
isolates itself, drops privileges, and exec&#39;s into the Firecracker
process to boot the VM.&lt;/p&gt;
&lt;p&gt;(Aside: &lt;code&gt;vmctl&lt;/code&gt; is pronounced &amp;quot;vm-cuddle&amp;quot;. Obviously.)&lt;/p&gt;
&lt;h2 id=&#34;bridge-interface&#34;&gt;Bridge Interface&lt;/h2&gt;
&lt;p&gt;I have an Ansible template that looks something like the following,
where &lt;code&gt;{{ prefix }}&lt;/code&gt; gets rendered with a &amp;quot;subnet prefix&amp;quot; for each of
the three physical machines. For example, one machine&#39;s prefix is
&lt;code&gt;&amp;quot;192.168.30&amp;quot;&lt;/code&gt;, which gets rendered as an IP of &lt;code&gt;192.168.30.1/24&lt;/code&gt; with
an IP range of &lt;code&gt;192.168.30.2&lt;/code&gt; to &lt;code&gt;192.168.30.254&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;network&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;name&amp;gt;default&amp;lt;/name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;bridge name=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;virbr0&amp;#39;&lt;/span&gt; stp=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;on&amp;#39;&lt;/span&gt; delay=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;forward mode=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;route&amp;#39;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;ip address=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;{{ prefix }}.1&amp;#39;&lt;/span&gt; netmask=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;255.255.255.0&amp;#39;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;dhcp&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;range start=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;{{ prefix }}.2&amp;#39;&lt;/span&gt; end=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;{{ prefix }}.254&amp;#39;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/dhcp&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/ip&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/network&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A handler in the Ansible role configures this bridge as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;virsh net-define ./virbr0.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;virsh net-autostart default
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;virsh net-start default
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that results in a bridge interface named &lt;code&gt;virbr0&lt;/code&gt; with the IP
&lt;code&gt;192.168.30.1/24&lt;/code&gt; on our example machine.&lt;/p&gt;
&lt;h2 id=&#34;cni&#34;&gt;CNI&lt;/h2&gt;
&lt;p&gt;Next I have a CNI configuration file in &lt;code&gt;/etc/cni/net.d&lt;/code&gt;. When CNI
invokes this configuration, it creates the bridge if it doesn&#39;t exist
(although we&#39;ve already created it for the QEMU VMs above). It then
allocates an IP address from the given range. Note that the range
starts at &lt;code&gt;192.168.30.32&lt;/code&gt; so that I have some room at the bottom for
the existing QEMU VMs. Next it sets up the appropriate iptables
ingress rules, and creates a tuntap device.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;name&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;firecracker&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;cniVersion&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;0.4.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;plugins&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;type&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;bridge&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;name&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;firecracker-bridge&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;bridge&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;virbr0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;ipam&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;#34;type&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;host-local&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;#34;resolvConf&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;/etc/resolv.conf&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;#34;dataDir&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;/srv/vm/networks&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;#34;subnet&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;192.168.30.0/24&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;#34;rangeStart&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;192.168.30.32&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;#34;gateway&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;192.168.30.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;type&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;firewall&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;type&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;tc-redirect-tap&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The CNI plugin is running as root inside the network namespace, before
we start the jailer. But the tuntap device will be opened by the
unprivileged Firecracker process the jailer starts. CNI plugin authors
understandably focus on the use case of K8s, so it took me a bit of
digging to figure out how to get the &lt;code&gt;tc-redirect-tap&lt;/code&gt; plugin to
create a device accessible to the jailer user. There are undocumented
arguments to set the user ID, group ID, and tap name. The
&lt;a href=&#34;https://www.cni.dev/docs/cnitool/&#34;&gt;&lt;code&gt;cnitool&lt;/code&gt;&lt;/a&gt; doesn&#39;t accept
arbitrary arguments for plugins but does accept a &lt;code&gt;CNI_ARGS&lt;/code&gt;
environment variable. These arguments get passed to &lt;em&gt;every&lt;/em&gt; plugin in
a chain of plugins, so you need to pass another argument
&lt;code&gt;IgnoreUnknown=1&lt;/code&gt; that by convention the plugin authors are supposed
to respect. The resulting &lt;code&gt;vmctl&lt;/code&gt; code looks something like the
following (some error handling and setting the &lt;code&gt;$uid&lt;/code&gt; and &lt;code&gt;$gid&lt;/code&gt; of
the jailer user have been elided for brevity).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; [ ! -f &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;/var/run/netns/&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt; ]; &lt;span style=&#34;font-weight:bold&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo ip netns add &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$id&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# I&amp;#39;ve named the device tap1 because the default is tap0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# and it makes it easier to verify args have been passed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# through to the CNI plugin correctly; we can reuse the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# name safely because each device ends up in its own netns&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;cniArgs&lt;/span&gt;=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;IgnoreUnknown=1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;cniArgs&lt;/span&gt;=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;cniArgs&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;;TC_REDIRECT_TAP_UID=&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$uid&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;cniArgs&lt;/span&gt;=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;cniArgs&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;;TC_REDIRECT_TAP_GID=&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$gid&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;cniArgs&lt;/span&gt;=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;cniArgs&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;;TC_REDIRECT_TAP_NAME=tap1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;result&lt;/span&gt;=&lt;span style=&#34;font-weight:bold&#34;&gt;$(&lt;/span&gt;sudo &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;CNI_PATH&lt;/span&gt;=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;/opt/cni/bin&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;              &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;NETCONFPATH&lt;/span&gt;=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;/etc/cni/net.d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;              &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;CNI_ARGS&lt;/span&gt;=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$cniArgs&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;              cnitool add firecracker &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;              &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;/var/run/netns/&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$id&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# we don&amp;#39;t pipe the cnitool straight into the file because&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# we want to return early if we get an error without writing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# this file that we use to check for idempotency&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$result&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt; | sudo tee &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;/srv/vm/networks/&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;firecracker&lt;/code&gt; argument to the &lt;code&gt;add&lt;/code&gt; subcommand refers to the name
of the CNI configuration.&lt;/p&gt;
&lt;h2 id=&#34;firecracker-configuration&#34;&gt;Firecracker Configuration&lt;/h2&gt;
&lt;p&gt;The next step for &lt;code&gt;vmctl&lt;/code&gt; is to create the chroot environment for the
jailer and to create a Firecracker configuration file from the
&lt;code&gt;$template&lt;/code&gt; argument. A minimal template looks like the following JSON
file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;boot-source&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;#34;kernel_image_path&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;vmlinux-5.8&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;#34;boot_args&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;console=ttyS0 reboot=k panic=1 pci=off&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;drives&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;drive_id&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;rootfs&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;path_on_host&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;alpine-rootfs.ext4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;machine-config&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;#34;vcpu_count&amp;#34;: 1,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;#34;mem_size_mib&amp;#34;: 512
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;network-interfaces&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;iface_id&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;eth0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;guest_mac&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;$MAC&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;host_dev_name&amp;#34;: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;$TAP&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the kernel, initrd, and any drives, &lt;code&gt;vmctl&lt;/code&gt; looks for the file in
a well-known location, creates a hardlink from there to the
jailer&#39;s chroot, and ensures the target is owned by the jailer user
and group. In this example, &lt;code&gt;/srv/vm/kernels/vmlinux-5.8&lt;/code&gt; will be
hardlinked to &lt;code&gt;/srv/vm/jailer/$id/root/vmlinux-5.8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The template file is rendered with the CNI configuration. We get the
MAC address, append an &lt;code&gt;ip&lt;/code&gt; argument to the boot arguments, and do
some fairly gross things with &lt;code&gt;jq&lt;/code&gt; to write that configuration to
&lt;code&gt;/srv/vm/configs/$id.json&lt;/code&gt;. That configuration is hardlinked to the
chroot at &lt;code&gt;/srv/vm/jailer/$id/root/config.json&lt;/code&gt; and owned by root.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# read from the CNI ouput&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;netcfg&lt;/span&gt;=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;/srv/vm/networks/&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;ip&lt;/span&gt;=&lt;span style=&#34;font-weight:bold&#34;&gt;$(&lt;/span&gt;jq -r &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.ips[0].address | rtrimstr(&amp;#34;/24&amp;#34;)&amp;#39;&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$netcfg&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;gateway_ip&lt;/span&gt;=&lt;span style=&#34;font-weight:bold&#34;&gt;$(&lt;/span&gt;jq -r &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.ips[0].gateway&amp;#39;&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$netcfg&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;mac&lt;/span&gt;=&lt;span style=&#34;font-weight:bold&#34;&gt;$(&lt;/span&gt;jq -r &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.interfaces[] | select(.name == &amp;#34;eth0&amp;#34;).mac&amp;#39;&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$netcfg&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;mask&lt;/span&gt;=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;255.255.255.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# shorten the uuid to something reasonable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;hostname&lt;/span&gt;=&lt;span style=&#34;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$id&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt; | tr -d &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; | head -c 16&lt;span style=&#34;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# capture the args from the template&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;boot_args&lt;/span&gt;=&lt;span style=&#34;font-weight:bold&#34;&gt;$(&lt;/span&gt;jq -r &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.&amp;#34;boot-source&amp;#34;.boot-args&amp;#39;&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$template&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# append our ip configuration:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# guest-ip:[server-ip]:gateway-ip:netmask:hostname:iface:state&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;boot_args&lt;/span&gt;=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;boot_args&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt; ip=&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;ip&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;gateway_ip&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;mask&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;hostname&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;:eth0:off&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# render the template&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;(.\&amp;#34;boot-source\&amp;#34;.boot_args) |= \&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$boot_args&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;    | (.\&amp;#34;network-interfaces\&amp;#34;[0].guest_mac) |= \&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$mac&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;      &amp;#34;&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$template&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;          sudo tee &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;/srv/vm/config/&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lastly &lt;code&gt;vmctl&lt;/code&gt; ties this all together by invoking jailer like I&#39;ve
shown below. To get the &lt;code&gt;firecracker&lt;/code&gt; binary I need to use &lt;code&gt;readlink&lt;/code&gt;
so that I can chase a symlink from &lt;code&gt;/usr/local/bin&lt;/code&gt; to my local build
from source.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo jailer &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     --id &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$id&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     --daemonize &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     --exec-file &lt;span style=&#34;font-weight:bold&#34;&gt;$(&lt;/span&gt;readlink &lt;span style=&#34;font-weight:bold&#34;&gt;$(&lt;/span&gt;which firecracker&lt;span style=&#34;font-weight:bold&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     --uid &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$uid&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     --gid &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$gid&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     --chroot-base-dir &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;/srv/vm/jailer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     --netns &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;/var/run/netns/&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$id&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     --new-pid-ns &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     -- &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     --config-file &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;config.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;stopping-a-vm&#34;&gt;Stopping a VM&lt;/h2&gt;
&lt;p&gt;To stop one of the VMs without destroying it entirely, I need to send
it a graceful shutdown, and then clean up the runtime files in the
jailer&#39;s chroot. The next time I create the VM, &lt;code&gt;vmctl&lt;/code&gt; will see that
we already have the network, VM configuration, and hardlinks in place
and will skip to calling jailer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;jail&lt;/span&gt;=&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;/srv/vm/jailer/firecracker/&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;/root&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;pid&lt;/span&gt;=&lt;span style=&#34;font-weight:bold&#34;&gt;$(&lt;/span&gt;sudo cat &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;jail&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;/firecracker.pid&amp;#34;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     --unix-socket &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;jail&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;/run/firecracker.socket&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     -H &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;accept: application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     -H &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     -X PUT &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;http://localhost/actions&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;     -d &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;{ \&amp;#34;action_type\&amp;#34;: \&amp;#34;SendCtrlAltDel\&amp;#34; }&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;while&lt;/span&gt; :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ps &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;$pid&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt; /dev/null || &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sleep 1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;echo&lt;/span&gt; -n &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;echo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo rm -r &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;jail&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;/firecracker.pid&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo rm -r &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;jail&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;/dev&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo rm -r &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;jail&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;/run&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo rm -r &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;jail&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;/firecracker&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This doesn&#39;t currently handle cleaning up if the VM shuts itself down,
so I&#39;ll need to return to that at some point and also add a &lt;code&gt;vmctl stop&lt;/code&gt; for all running VMs to the host machine&#39;s shutdown.&lt;/p&gt;
&lt;h2 id=&#34;routing&#34;&gt;Routing&lt;/h2&gt;
&lt;p&gt;Finally, we need to set up routing so that packets from the host or
other machines can reach the VMs. On each host we set forwarding,
which looks like the following Ansible tasks but you can also do via
ex. &lt;code&gt;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- sysctl:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name: net.ipv4.ip_forward
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    value: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state: present
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    reload: &lt;span style=&#34;font-weight:bold&#34;&gt;yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  become: &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- sysctl:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name: net.ipv4.conf.all.forwarding
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    value: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state: present
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    reload: &lt;span style=&#34;font-weight:bold&#34;&gt;yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  become: &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- sysctl:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name: net.ipv6.conf.all.forwarding
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    value: &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state: present
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    reload: &lt;span style=&#34;font-weight:bold&#34;&gt;yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  become: &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then on the ISP&#39;s router, we set up routing rules. I&#39;ve got a Fios
router here, so I go to the &lt;code&gt;#/advanced/routing&lt;/code&gt; page and configure a
rule for each machine. The &amp;quot;destination&amp;quot; field is the subnet prefix
(ex. &lt;code&gt;192.168.30.0&lt;/code&gt;), whereas the &amp;quot;gateway&amp;quot; field is the IP address of
the physical host for that subnet (ex. &lt;code&gt;192.168.1.101&lt;/code&gt; for my laptop).&lt;/p&gt;
&lt;p&gt;Now any machine on the LAN can reach any other machine on the LAN,
physical or virtual. And I can further configure port mapping in the
router to expose any of the machines to the public internet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Strictly Aspirational Engineering Values</title>
      <link>https://blog.0x74696d.com/posts/strictly-aspirational-engineering-values/</link>
      <pubDate>Sat, 01 May 2021 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/strictly-aspirational-engineering-values/</guid>
      <description>&lt;p&gt;It was before lunch on my first day when I found myself in a
conference room during a total service outage, with thirty or so other
men yelling over each other &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;This was particularly alarming because during my interviews we&#39;d
talked a lot about building disciplined incident response culture,
developing deep insight about the platform, and avoiding normalization
of deviance. Clearly, I&#39;d thought, this was going to be a team of
serious professionals. But this was a few years back now and maybe
I&#39;ve learned a lot since then about seeing through interviewer
bullshit.&lt;/p&gt;
&lt;p&gt;Needless to say I didn&#39;t even have production access at this point or
know much about the architecture. I&#39;d just gotten my laptop and some
swag from the HR goons, and went to greet my new teammates when some
dude rolled into the office and dragged every man who looked older
than thirty into a &amp;quot;war room.&amp;quot; Yeah, only men. Maybe I&#39;ll come back to
that in another story.&lt;/p&gt;
&lt;p&gt;I found myself reading over some stranger&#39;s shoulder, someone who was
yelling less than the others and who had some of the monitoring up on
their machine. There was something definitely memcached related or at
least memcached adjacent going on judging by the conversation in the
room. Without much else to do, I offered my shoulder-surfee help
looking at memcached. I&#39;d had plenty of previous adventures with it,
so if nothing else I could help eliminate it as the source of the
problem.&lt;/p&gt;
&lt;p&gt;As it turned out they were using a fully managed memcached service and
only had the metrics that the provider emitted, which wasn&#39;t a
lot. The service was definitely in trouble with high latency. The
downstream consumers were a bunch of different web services running on
pre-fork application servers &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. The application server processes
could each handle only a single concurrent request at a time, so
latency in upstream services like memcached quickly cascaded into a
full outage.&lt;/p&gt;
&lt;p&gt;I noticed the number of connections looked high relative to the number
of processes I&#39;d expect to see running, and then noticed that the
number of &lt;em&gt;new&lt;/em&gt; connections was roughly equal to the number of current
connections. A hypothesis started to form that the applications
weren&#39;t keeping open their connections and was churning them out so
fast that memcached was burning time queuing those connections.&lt;/p&gt;
&lt;p&gt;Without shell access to the memcached host, I asked what monitoring
there was on outbound connections from the clients so we could figure
out which services were causing the problem. There was none. Ok, I
suggested, we&#39;ll just script something to ssh onto all the application
cluster nodes, scrape the connections being made to the memcached IPs
for a short window, and then we&#39;ll know if it&#39;s just one service.&lt;/p&gt;
&lt;p&gt;This suggestion was not taken well. One did not simply ssh onto a
host. As it turned out, I was one of only three people in the room who
even had sufficient permissions to ssh onto a host, and two of us were
currently getting hungry waiting for our first day onboarding lunch. I
was getting a serious stink eye from the senior-most engineer in the
room. Even the CTO managed to shut up for, like, ten whole seconds
&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Many many dollars were being burned every minute, so I gently
suggested I could take my new best friend and we could go poke at the
memcached client out of the way of everyone else. We got the go ahead
and I scrambled to get my laptop properly authorized so we could shell
into an application server node.&lt;/p&gt;
&lt;p&gt;The dude who I&#39;d been shoulder surfing was now shoulder surfing me. We
were looking at &lt;code&gt;netstat&lt;/code&gt;, querying memcached stats via &lt;code&gt;telnet&lt;/code&gt;,
measuring &lt;code&gt;connect&lt;/code&gt; syscalls via BPF, and getting good confirmation of
the hypothesis. You&#39;d have thought I&#39;d introduced fire to this guy. To
be clear, this was an organization with lots of senior talent that
proudly hired tons of folks from Google (and was quick to remind you
of it). But asking the operating system what was wrong was just not
something people did here.&lt;/p&gt;
&lt;p&gt;We&#39;d found which service was causing the problem, and now the trick
was to figure out what was wrong with it. Here&#39;s where I think the
various expense but very powerful observability services
(ex. Honeycomb) would have come in handy, but we didn&#39;t have anything
like that. Most of the war room broke off to isolate the buggy service
and clean up the damage. My buddy and I started digging into the
service&#39;s memcached client. Naturally this was a third party library
selected in ages past by the company founder, primarily on the basis
of GitHub stars. And as far as anyone knew, no one had ever reviewed
its internals. Which was unfortunate because I wasn&#39;t even familiar
with the language and we found a bug in the connection pool logic
within fifteen minutes of looking at it. This wasn&#39;t even &lt;em&gt;the&lt;/em&gt;
problem though. That was so much worse.&lt;/p&gt;
&lt;p&gt;The logs querying service was truly wretched and I can only assume was
chosen on the basis of price and price alone. But now that we knew
what service was misbehaving, we could get the log volume to search
over down to something reasonable. Only to immediately find that the
application server&#39;s worker processes were in a slow restart loop.&lt;/p&gt;
&lt;p&gt;Pre-fork application servers for interpreted languages often have an
interesting design feature where they just blithely assume you&#39;re
going to leak references all over the place, and so they let you
configure a limit on the number of requests or amount of memory for a
given worker. When the process reaches that limit, the main process
signals it to stop and replaces it with a fresh one. This is fun if
you&#39;re running the application server in a container (which we were),
because the memory limit of the container needs to match the sum of
the memory limits of the workers, plus enough for the main process, or
it&#39;ll randomly OOM instead.&lt;/p&gt;
&lt;p&gt;The application server was starting a worker, the worker would eagerly
open a pool of memcached connections (for the single threaded
program!) and proceed to request a whole mess of &lt;em&gt;huge&lt;/em&gt; blobs of
cached data at startup. The cached data would get deserialized to
giant in-memory hashmaps. The application would manage to serve only a
handful of requests before blowing the top off the worker memory limit. The
main process would kill it, and start another one to replace
it. Repeat until outage.&lt;/p&gt;
&lt;p&gt;It&#39;s a cheap shot to point out that this wasn&#39;t being
monitored. Applications and the OS and machine that hosts them can
produce nearly arbitrary volumes of metrics and logs. The cost to
ingest and analyze &lt;em&gt;all&lt;/em&gt; that data could easily exceed the business
value of the service, so you have to make compromises. But... I feel
like it&#39;s not unreasonable to draw the line well before &amp;quot;we&#39;re not
going to notice if the application is constantly restarting&amp;quot;.&lt;/p&gt;
&lt;p&gt;In any case, I say to the room &amp;quot;well there&#39;s yer problem.&amp;quot; The
consensus in the room was that the solution was to bump the limit on
the application server and its container. It gets doubled, and the
outage is over.&lt;/p&gt;
&lt;p&gt;I finally get to have my onboarding lunch with my team, and I ask how
we typically notify the team that owns the misbehaving service to fix
it. The answer was that we didn&#39;t. Service teams didn&#39;t care to know
what resources they were using, and the platform team didn&#39;t care to
know what the normal behavior was supposed to be. All over the
organization, there were dozens of services in this state. They&#39;d just
continue to consume more and more resources until they caused an
outage, and that was it. We were adding many more developers and many
more services, without adding any additional observability or
incentive to care about the problem. The platform and infrastructure
teams were getting paged two and three times a day as a
result. Deviance had been completely normalized, at the expense of
both the business and the human beings who had to clean up the mess.&lt;/p&gt;
&lt;p&gt;It should come as no surprise that this was the first of many such
incidents during my tenure. The yawning gap between the team&#39;s
aspirational values and their practice never closed. When an
organization shows you who they are, believe them.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Some small details of this story have been altered to protect
the innocent, to paper over gaps in my memory, or for comedic
effect. Unfortunately the first sentence of this post is not one
of those details and is absolutely true.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;I&#39;m being deliberately vague here but if you&#39;ve used Django on
gunicorn without gevent or Rails on unicorn rather than puma,
that&#39;s the sort of thing I&#39;m talking about.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;This is an example of changing details for comedic effect. He
actually shut up for five seconds, at most.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Small Design Up Front</title>
      <link>https://blog.0x74696d.com/posts/small-design-up-front/</link>
      <pubDate>Sat, 13 Feb 2021 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/small-design-up-front/</guid>
      <description>&lt;p&gt;At my current gig and several before that, the initial engineering
design document is the Request for Comments (RFC), sometimes called
the &lt;a href=&#34;https://github.com/joyent/rfd&#34;&gt;Request for Discussion&lt;/a&gt; (RFD).&lt;/p&gt;
&lt;p&gt;If you&#39;ve been reading the series on building a ZFS plugin for Nomad&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;,
you might have asked yourself if this kind of stumbling through the
design is typical of the RFC documents I&#39;ve written. But that series
is really about all the design work that happens before the initial
design is documented. It&#39;s brainstorming, hypothesizing, and
exploration. The first draft of a RFC is the output of that work, so
typically by the time anyone else has seen it hopefully the obviously
dumb ideas and dead ends have been weeded out.&lt;/p&gt;
&lt;p&gt;The RFC ends up being a good &amp;quot;sandbox&amp;quot; for a small up-front design
process. I suspect it&#39;s especially valuable for system software where
even a minimal experiment can be costly. And the structure discourages
you from trying to come up with a rigid specification that&#39;s doomed to
be invalid the moment you start implementing it.&lt;/p&gt;
&lt;p&gt;In some sense you&#39;re writing a RFC to communicate to your peers what
you&#39;ve already figured out about the problem. Their time is a gift,
and the most valuable feedback to get is that which you couldn&#39;t think
of on your own. So you should invest the time to ensure they&#39;re not
just going to tell what you should already know. In a healthy
organization, writing is a way to collectively discover the design,
rather than persuade the team.&lt;/p&gt;
&lt;p&gt;The phrase &amp;quot;in a healthy organization&amp;quot; is doing a lot of work
here. I&#39;ve worked places where RFC discussions were more of a battle
ground for interpersonal conflict and office politics than meaningful
engineering discussion. In that environment you end up writing
defensively to head off debate and hide implementation details that
will trigger objections. These documents are better named Request for
Permission. And if you&#39;re in this situation... well, writing RFCs ain&#39;t
gonna save you.&lt;/p&gt;
&lt;p&gt;I&#39;m probably a weird outlier, but I even write RFCs for personal
projects. Call it writing as structured thought experiment. It&#39;s a
tool, and one that supplements rather than replaces a whiteboard
diagram or a throwaway spike. I could easily throw it out as soon as
it&#39;s done, but why not keep it?&lt;/p&gt;
&lt;p&gt;There can be a few audiences for those artifacts. A project might get
completed to the point where it could be open sourced, in which case
having those early design documents would be valuable to users or
contributors. But the most important audience is Future Me. My level
of interest or volume of work on these projects ebbs and flows. I
might take a project through the initial design, feel like I&#39;ve
explored the problem well enough to learn what I wanted to learn, and
set it aside for months. The RFC is like a well-written commit message
for the project as a whole.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;This series unfortunately had to be removed to due overreaching
GitHub account policy claims by my employer.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Single purpose visualization</title>
      <link>https://blog.0x74696d.com/posts/single-purpose-visualization/</link>
      <pubDate>Sat, 30 Jan 2021 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/single-purpose-visualization/</guid>
      <description>&lt;p&gt;There&#39;s an enormous wealth of data analysis and visualization tools
available, from full-fledged managed services like Honeycomb all the
way down to Python libraries like Matplotlib. These days I&#39;m writing
shrink-wrapped infrastructure software, so when I&#39;m debugging problems
I&#39;ve been leaning way more to one end of that spectrum: writing single
purpose tools.&lt;/p&gt;
&lt;p&gt;I can just barely fool myself into thinking there&#39;s a Unix philosophy
at work here about tools that do one thing and do it well. But if I&#39;m
being honest most of these tools turn out to be throwaway because
they&#39;re operating at the wrong level of abstraction. I&#39;m solving the
problem immediately in front of me and not worrying about software
architecture unless and until I need it again. Also we&#39;re
overwhelmingly a golang shop, so trying to package up Python tools so
that support folks can reuse them is a burden.&lt;/p&gt;
&lt;p&gt;A recent example of this a tool I wrote for visualizing metrics from a
Nomad debug bundle. Nomad&#39;s (&lt;a href=&#34;https://www.nomadproject.io/docs/commands/operator/debug&#34;&gt;&lt;code&gt;operator debug&lt;/code&gt;&lt;/a&gt;)
gathers up a bunch of logs from the cluster and takes a series of
snapshots of the raft state and cluster metrics, and then dump this
whole thing into a tarball. Our support folks can use this for
gathering a ton of data about a customer problem without having to do
a long back-and-forth of questions, and when they need to escalate to
engineers they can hand off the bundle and we can make a first pass at
the problem without bothering the customer some more.&lt;/p&gt;
&lt;p&gt;The challenge is that this data is basically just a bunch of Nomad&#39;s
API responses or internal structs dumped out to JSON. A bundle for a
complex problem with lots of snapshots can easily be 100MB of JSON to
grub through.&lt;/p&gt;
&lt;p&gt;So suppose I want to find how many goroutines are running over time. I
look up the field name in the &lt;a href=&#34;https://www.nomadproject.io/docs/operations/metrics&#34;&gt;metrics
docs&lt;/a&gt;, check the
&lt;a href=&#34;https://github.com/hashicorp/nomad/blob/v1.0.3/api/operator_metrics.go#L8-L15&#34;&gt;&lt;code&gt;api.MetricsSummary&lt;/code&gt;&lt;/a&gt;
output for which fields that&#39;s going to be under, and I incrementally
massage my way through the JSON with trial and error and &lt;code&gt;jq&lt;/code&gt; until I
get something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls nomad/*/metrics.json |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    xargs jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;        .Gauges[]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;        | select(.Name == &amp;#34;nomad.runtime.num_goroutines&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;        | .Value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;        &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yes, yes. I know I can use &lt;code&gt;find -exec&lt;/code&gt; instead. Take this and your
&amp;quot;useless use of cat&amp;quot; and leave me alone.&lt;/p&gt;
&lt;p&gt;The result is a list of numbers, and if I could understand the
&lt;code&gt;gnuplot&lt;/code&gt; interface I&#39;d probably pipe those numbers there. But
extracting timestamps from this data structure is really painful in
&lt;code&gt;jq&lt;/code&gt; and I&#39;ll never remember how to do it next time unless I save it
in a script somewhere, etc.&lt;/p&gt;
&lt;p&gt;This time I wanted to be able to show this to our support folks, so I
decided to turn it into a single purpose visualization tool that I
knew they could build. I grabbed the &lt;code&gt;gonum/plot&lt;/code&gt; library, which is
definitely not nearly as nice as Matplotlib but it got the job
done. The resulting tool&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; takes a list of metrics files and
generates a simple SVG (which is pronounced &amp;quot;svig&amp;quot;, by the way) for
one metric.&lt;/p&gt;
&lt;p&gt;If I want to see the latency between the raft leader and its peers, I
can pipe in the list of metrics files and search for that specific
metric:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls nomad/*/metrics.json |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nomad-metrics-plot &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;nomad.raft.leader.lastContact&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the resulting visualization makes it obvious to me that this
cluster is having latency issues between raft peers: the mean and
maximum latency is well above what&#39;s recommended and they have spikes
where the 500ms timeout is being hit, which forces a leader election.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.0x74696d.com/images/20210130/metrics.svg&#34; alt=&#34;plot of raft.leader.lastContact metrics&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the tool is terrible in many ways: the metric name has to be
an exact match, it has to read in the entire data set every time it
runs, there&#39;s no flag on where to send the output file, and it doesn&#39;t
open the SVG in your browser for you. But I can put this in front of
someone &lt;em&gt;today&lt;/em&gt; without it causing me a huge support burden to get
them spun up on it. And then I can iterate on it over time or abandon
it if something better comes along.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;This repo that originally went with this article unfortunately had
to be removed to due overreaching GitHub account policy claims by
my employer.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hugo 1-byte outputs</title>
      <link>https://blog.0x74696d.com/posts/hugo-one-byte-outputs/</link>
      <pubDate>Wed, 27 Jan 2021 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/hugo-one-byte-outputs/</guid>
      <description>&lt;p&gt;A particularly annoying bug in Hugo that I&#39;ve been running into is
that it will output 1-byte files for the index and other pages. This
is not sparking joy.&lt;/p&gt;
&lt;p&gt;What&#39;s particularly bad about it is that it&#39;s not at all
consistent. Any given build will just randomly decide that the front
page or the RSS feed should be empty. So every time I pushed to
Netlify it&#39;d be a crap shoot as to whether or not the whole site would
break. While I try to figure this out I&#39;ve been building locally,
checking manually with &lt;code&gt;find -size 1c&lt;/code&gt;, and then pushing the whole
build output directory to Netlify.&lt;/p&gt;
&lt;p&gt;This is a good example of where a tool has made so much of their
stated value proposition about performance that they seem to have
forgotten to do the job correctly. It&#39;s the MongoDB of static website
generator software. And it&#39;s totally undebuggable of course; they give
you no tools except for ones that help you debug rendering performance
(which, I am forced to admit, are &lt;a href=&#34;https://github.com/devopsdays/devopsdays-theme/issues/643&#34;&gt;pretty
nice&lt;/a&gt;). I
probably have some small template bug that&#39;s only triggering some
interleaved concurrent rendering path in Hugo when the moon is waxing
full, resulting in a file that contains only a single newline.&lt;/p&gt;
&lt;p&gt;Of course I dug through their GitHub issues looking for anything
similar and their answers always start with asking you to upgrade to
the very latest version. Which would be fine except that every single
time I&#39;ve updated Hugo they&#39;ve broken backwards compatibility in their
templates. If I wanted that kind of pain I would just fix the damn bug
myself. And hey it&#39;s open source so isn&#39;t that the beauty of it? But
it&#39;s a static website renderer with acute featuritis, which is exactly
the sort of nerd snipe that&#39;s going to find me writing my own from
scratch. As one does.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Main Branch</title>
      <link>https://blog.0x74696d.com/posts/main-branch/</link>
      <pubDate>Tue, 26 Jan 2021 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/main-branch/</guid>
      <description>&lt;p&gt;A short and mostly unserious rant.&lt;/p&gt;
&lt;p&gt;Much of the industry seems to have come around to changing the default
branch for git from &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt;. It&#39;s absolutely terrible. Oh,
not changing from &lt;code&gt;master&lt;/code&gt;. That&#39;s fine. A modest improvement in
making our industry kinder. I&#39;m all for it. But we picked &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Literally any time anything to do with git comes up, you&#39;ve got a
whole mess of people complaining about what a terrible user experience
it has, and how hard it is to bring new people into the industry when
we use such unfriendly tools, and yada yada yada. And they&#39;re mostly
right.&lt;/p&gt;
&lt;p&gt;The git data model is awesome, but the command line interface is an
inconsistent disaster that we&#39;re all begrudgingly forced to learn. I
feel like I have a really solid understanding of the data model and
I&#39;m a rebasing and reflogging fiend, but I still end up having to
double-check the man page every time I get away from the twenty or so
commands I use on a regular basis. But we all recognize how hard it is
to change software that&#39;s been in widespread use. Backwards
compatibility is important.&lt;/p&gt;
&lt;p&gt;So there we were as a whole software industry, faced with a rare
opportunity to break free from a legacy decision...&lt;/p&gt;
&lt;p&gt;And we picked &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Main? &lt;em&gt;Main!?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The correct answer was &lt;code&gt;trunk&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Obviously.&lt;/p&gt;
&lt;p&gt;Choosing &lt;code&gt;main&lt;/code&gt; is exactly the sort of short-term local-maxima
thinking I&#39;ve come to expect from the industry. It&#39;s short, and it
preserves some muscle memory from &lt;code&gt;master&lt;/code&gt;. So you&#39;re saving typing
one (1) character over &lt;code&gt;trunk&lt;/code&gt;, assuming you&#39;re not a professional
with shell completion. And you&#39;re preserving muscle memory, which only
makes a difference during the month or so after your team has switched
away from &lt;code&gt;master&lt;/code&gt;, and only for the &lt;em&gt;set of people who are currently
using git&lt;/em&gt;. It means nothing to the umpteen million people who will be
coming into the industry over the next several decades (at least!)
that we&#39;ll be using git.&lt;/p&gt;
&lt;p&gt;Instead, we could have chosen &lt;code&gt;trunk&lt;/code&gt; and made some tiny marginal
improvement in the beginner&#39;s mental model for all those people. And
calling the default branch &lt;code&gt;trunk&lt;/code&gt; is &lt;em&gt;fun&lt;/em&gt;. Have some fun for fuck&#39;s
sake. A &lt;code&gt;main&lt;/code&gt; branch is dry toast.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exec from Your start.sh</title>
      <link>https://blog.0x74696d.com/posts/exec-from-your-start-script/</link>
      <pubDate>Mon, 25 Jan 2021 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/exec-from-your-start-script/</guid>
      <description>&lt;p&gt;At some point I noticed that some large portion of containers I&#39;ve
seen have some kind of &lt;code&gt;start.sh&lt;/code&gt; script file doing some setup and
then calling the actual application. Unfortunately a ton of these
break features of the application server. Like the previous post on
dropping signals, the way this typically manifests is the application
server can&#39;t reload configuration or gracefully shut down.&lt;/p&gt;
&lt;p&gt;Your standard user-friendly web frameworks run your code inside an
application server. This is what opens up a port, accepts connections,
and turns the data that comes into over those connections into some
kind of &amp;quot;request object&amp;quot;. Usually this will be a library separate from
your framework with some of its guts written in C, and the framework
will support a few options for servers. For Django this might be uwsgi
or gunicorn, for Rails it might be puma or unicorn, and for Spring it
might be Tomcat or Jetty.&lt;/p&gt;
&lt;p&gt;Most of these application servers have a bunch of nice features that
rely on signals, to reload the configuration, do graceful shutdown,
add extra worker processes, or whatever. And then some unlucky
developer gets handed a Dockerfile and gets told they have to use
that. But they have to load some config or do some setup at start
up. They look up how to do it and systemd has some &lt;code&gt;ExecStartPre&lt;/code&gt;
thing but this container stuff doesn&#39;t. And no one has ever bothered
to teach them what this is supposed to look like because developers
are only supposed to care about business logic anyways. So we end up
with a process tree in the container like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ps f -o pid,comm
  PID COMMAND
    1 /bin/sh start.sh
    8  \_ /usr/local/bin/gunicorn
   21     \_ gunicorn worker
   22     \_ gunicorn worker
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now the orchestrator wants to tell the application to reload its
config and it sends a &lt;code&gt;SIGHUP&lt;/code&gt; to the container. By which we mean
PID1 in the container, which is our &lt;code&gt;start.sh&lt;/code&gt; script. It doesn&#39;t know
anything about signals, so it dies and takes the application with it.&lt;/p&gt;
&lt;p&gt;If you&#39;re using Docker you might have a
&lt;a href=&#34;https://github.com/krallin/tini&#34;&gt;&lt;code&gt;tini&lt;/code&gt;&lt;/a&gt; init process in there as
PID1 that&#39;ll pass signals to the &lt;code&gt;start.sh&lt;/code&gt; script, but the result is
the same because the signals never reach the application server.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ps f -o pid,comm
  PID COMMAND
    1 init
    7 \_ /bin/sh start.sh
   21     \_ /usr/local/bin/gunicorn
   22        \_ gunicorn worker
   23        \_ gunicorn worker
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What we wanted to do is to call &lt;code&gt;exec&lt;/code&gt; in our &lt;code&gt;start.sh&lt;/code&gt; script. Then
the process tree looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ps f -o pid,comm
  PID COMMAND
    1 /usr/local/bin/gunicorn
    7 \_ gunicorn worker
    8 \_ gunicorn worker
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Doing this also means we can just set export environment variables in
the shell script and they&#39;ll be set in our new application server
process. A minimal working example looks like the following.&lt;/p&gt;
&lt;p&gt;Here&#39;s our mock application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;chan&lt;/span&gt; os.Signal, 1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    signal.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Notify&lt;/span&gt;(c, syscall.SIGINT)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; _, env := &lt;span style=&#34;font-weight:bold&#34;&gt;range&lt;/span&gt; os.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Environ&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fmt.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Println&lt;/span&gt;(env)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;-c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;\ngraceful shutdown!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our minimal startup script:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh
export SUPER_SECRET_FROM_VAULT=xyzzy
export PLATFORM=$(uname)
exec printenvvars
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And our Dockerfile:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM busybox:1
COPY printenvvars /bin/printenvvars
COPY start.sh /bin/start.sh
ENTRYPOINT [&amp;#34;/bin/start.sh&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We build that with &lt;code&gt;docker build -t test .&lt;/code&gt; and now let&#39;s run it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker run test
HOSTNAME=741960aa5144
HOME=/root
SUPER_SECRET_FROM_VAULT=xyzzy
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
PLATFORM=Linux
PWD=/
^C
graceful shutdown!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note this will hang until we hit Ctrl-C, which sends &lt;code&gt;SIGINT&lt;/code&gt; to PID1
in the container. At that point the channel in our application
unblocks and we see the graceful shutdown message.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dropped Signals</title>
      <link>https://blog.0x74696d.com/posts/dropped-signals/</link>
      <pubDate>Sun, 24 Jan 2021 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/dropped-signals/</guid>
      <description>&lt;p&gt;A lot of go applications try to do something clever with signals and
end up dropping signals on the floor. I&#39;ve definitely written this
kind of bug myself. It&#39;s not a community practice to lean on an
application server rather than the stdlib, so that creates an
opportunity for folks to incorrectly implement it from scratch.&lt;/p&gt;
&lt;p&gt;Note that we&#39;re not talking about
&lt;a href=&#34;https://man7.org/linux/man-pages/man7/signal-safety.7.html&#34;&gt;&lt;code&gt;signal-safety(7)&lt;/code&gt;&lt;/a&gt;. For
purposes of this discussion we&#39;re going to merrily assume the authors
of &lt;a href=&#34;https://golang.org/pkg/os/signal/#Notify&#34;&gt;&lt;code&gt;os/signal.Notify&lt;/code&gt;&lt;/a&gt; have
avoided any signal-unsafe code. Although it&#39;d be neat to dig into how
that worked out with the go scheduler at some point.&lt;/p&gt;
&lt;p&gt;The docs for &lt;code&gt;os/signal.Notify&lt;/code&gt; say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Package signal will not block sending to c: the caller must ensure
that c has sufficient buffer space to keep up with the expected
signal rate. For a channel used for notification of just one signal
value, a buffer of size 1 is sufficient.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We have to read this a bit carefully; it says a buffer of size 1 is
sufficient for one signal &lt;em&gt;value&lt;/em&gt;, which is not the same as one signal
type.&lt;/p&gt;
&lt;p&gt;Suppose we have a server that can reload its configuration on &lt;code&gt;SIGHUP&lt;/code&gt;
and does a graceful shutdown on &lt;code&gt;SIGINT&lt;/code&gt; (or &lt;code&gt;SIGTERM&lt;/code&gt;). If we&#39;re in
the middle of doing a configuration load and get a shutdown notice,
we&#39;ll queue-up the shutdown signal and process it afterwards. The
signal mask is still in place, so any other signal sent during that
window will get dropped.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;chan&lt;/span&gt; os.Signal, 1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    signal.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Notify&lt;/span&gt;(c, syscall.SIGINT, syscall.SIGHUP)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s := &amp;lt;-c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold&#34;&gt;switch&lt;/span&gt; s {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold&#34;&gt;case&lt;/span&gt; syscall.SIGHUP:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            fmt.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;Got SIGHUP, reloading config...&amp;#34;&lt;/span&gt;, s)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            time.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Sleep&lt;/span&gt;(1 * time.Second)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold&#34;&gt;case&lt;/span&gt; syscall.SIGINT:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            fmt.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;Got SIGINT, gracefully shutting down...&amp;#34;&lt;/span&gt;, s)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            time.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Sleep&lt;/span&gt;(1 * time.Second)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we run this program in one terminal and then send it 3 signals in a
row, we can see we drop one of them.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# first terminal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go run .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Got SIGHUP, reloading config... hangup
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Got SIGHUP, reloading config... hangup
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# second terminal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pkill -SIGHUP signals; pkill -SIGHUP signals; pkill -SIGINT signals
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This would be a catastrophic bug in an init system or process
supervisor (and/or something like
&lt;a href=&#34;https://github.com/joyent/containerpilot&#34;&gt;ContainerPilot&lt;/a&gt;, where it
actually was a bug in early versions). We need to catch &lt;code&gt;SIGWAIT&lt;/code&gt; to
reap zombie processes. It&#39;d also cause dropped signals for an
interactive terminal application, where we&#39;d probably masking
&lt;code&gt;SIGWINCH&lt;/code&gt; to detect terminal window size changes.&lt;/p&gt;
&lt;p&gt;But for most web applications this isn&#39;t a huge deal. Typically where
this bites us is if we have an orchestration layer that sends &lt;code&gt;SIGINT&lt;/code&gt;
or &lt;code&gt;SIGTERM&lt;/code&gt; for graceful shutdown and then kills the process
unceremoniously after a timeout. But there&#39;s some kind of automated
process that&#39;s picking up changes from the environment and firing
&lt;code&gt;SIGHUP&lt;/code&gt; to do a config reload. If we drop the graceful shutdown
signal because we&#39;re stuck in a config reload, then the orchestrator
sends an interrupt that the application ignores. After 10 seconds or
whatever your timeout is, the orchestration says &amp;quot;whelp, I give up&amp;quot;
and sends a &lt;code&gt;SIGKILL&lt;/code&gt;. And then our application drops in-flight
requests and users are unhappy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git-send-email</title>
      <link>https://blog.0x74696d.com/posts/git-send-email/</link>
      <pubDate>Sat, 29 Aug 2020 12:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/git-send-email/</guid>
      <description>&lt;p&gt;Recently &lt;em&gt;The Register&lt;/em&gt; &lt;a href=&#34;https://www.theregister.com/2020/08/25/linux_kernel_email/&#34;&gt;published an
interview&lt;/a&gt;
with Microsoft&#39;s Sarah Novotny where she claimed that the Linux kernel
project&#39;s reliance on plain-text email was a barrier to entry for new
kernel developers.&lt;/p&gt;
&lt;p&gt;Predictably a bunch of folks showed up on Twitter to heap abuse and
gatekeep people&#39;s email clients, and just as predictably a lot of
well-meaning folks took the opposing side that because those people
were jerks, that Novotny was right. So I want to talk about both why
the structure of these kinds of arguments is such a disaster and why I
agree with Novotny&#39;s stated goals but think that she doesn&#39;t have much
of a solution to the problem.&lt;/p&gt;
&lt;h2 id=&#34;misaligned-goals&#34;&gt;Misaligned Goals&lt;/h2&gt;
&lt;p&gt;Let&#39;s address the jerks first because they&#39;re the least interesting
bit. Novotny&#39;s stated goals as Microsoft&#39;s representative to the Linux
Foundation board are to ensure the long term survival of the Linux
kernel project and in particular to ensure there&#39;s a flow of new
maintainers to the project. It should follow without question that for
there to be new maintainers, there needs to be a flow of new
contributors who eventually become experience contributors who can
take over from the old maintainers as they literally age-out of
working on the kernel full time. I can&#39;t think of any possible
good-faith argument against this goal, because it&#39;s rooted in the
reality that kernel developers are mortal.&lt;/p&gt;
&lt;p&gt;I&#39;m also going to put some words into Novotny&#39;s mouth here (in a
friendly sense) and suggest that in referring &amp;quot;developers who have
grown up in the last five or ten years&amp;quot; she&#39;s also looking to expand
the &lt;em&gt;demographics&lt;/em&gt; of the kernel project contributors. That&#39;s a worthy
goal!&lt;/p&gt;
&lt;p&gt;But whether or not she intended to imply that, I suspect that many of
the gatekeeping types &lt;em&gt;think&lt;/em&gt; she implied it. This is what sets up the
Twitter shitposting, because you have a very noisy group of people who
long-ago staked ground that they want tech to be the domain of cranky
white cis dudes (optionally with beards) and will jump at the
opportunity to fight about it. I find these people super frustrating
both because they&#39;re awful and because they suck all the air out of
the room from what could otherwise be adult conversations about the
best tactics. Unfortunately a lot of very smart and empathetic people
that I like get suckered into engaging in that conversation. You can&#39;t
reach these people, only freeze them out. (And hope that eventually
they&#39;ll do some work on themselves and be ready to join a culture that
is happy to embrace them again, but I&#39;m admittedly cynical about
that.)&lt;/p&gt;
&lt;h2 id=&#34;not-disinterested&#34;&gt;Not Disinterested&lt;/h2&gt;
&lt;p&gt;The second set of arguments you can have here is that Novotny is not a
disinterested party. She works for Microsoft, and previously worked at
Google. Both of these organizations have reputations for open source
malfeasance and those reputations are going to be reflected onto
anything she says.&lt;/p&gt;
&lt;p&gt;If you read the interview carefully, you&#39;ll find that Novotny is
talking in fairly broad strokes without really recommending anything
in particular. (This probably contributes to the focus of the
discussion on plain-text email and not maintainer succession) So if
you think that the reputation of Microsoft is well-deserved, you&#39;re
not likely to read between those lines in a way that assumes good
intent. Instead, it vaguely smells like another nefarious attempt at
&lt;a href=&#34;https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish&#34;&gt;&amp;quot;embrace, extend,
extinguish&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A similar example might be if Linux Torvalds has something excitable
but borderline to say on the LKML. Because of his reputation as being
an asshole, if you&#39;re inclined to see him as a jerk you&#39;ll read what
he says uncharitably. Whereas if you&#39;re inclined to believe he&#39;s
trying to do the work of self-improvement, you may read it more
generously as enthusiastically penetrating questions to a colleague he
respects.&lt;/p&gt;
&lt;p&gt;Novotny&#39;s playing coy about hosting kernel development on GitHub
probably works against her here. We all know that&#39;s what we&#39;re talking
about, because there are no technically feasible alternatives for a
project of that scale. (Sorry GitLab.)&lt;/p&gt;
&lt;p&gt;In any case, while I&#39;m not particularly inclined to see Microsoft in a
good light, in this case I don&#39;t see much to be paranoid about. While
I&#39;m sure GitHub would love the reputational boost of hosting kernel
development, this is small potatoes in the grand scheme of things. It
wouldn&#39;t give Microsoft special control over the project that it
doesn&#39;t already have by its funding, board position, and many
development contributions.&lt;/p&gt;
&lt;h2 id=&#34;nobody-escapes-conways-law&#34;&gt;Nobody Escapes Conway&#39;s Law&lt;/h2&gt;
&lt;p&gt;If we get rid of misaligned goals or accusations of bad faith, that
leaves us with a discussion of tactics. This is where I suspect
Novotny&#39;s background at Google is influencing her to try to apply a
tooling fix to a cultural problem.&lt;/p&gt;
&lt;p&gt;Which is to say, &lt;code&gt;git-send-email&lt;/code&gt; is not the problem here.&lt;/p&gt;
&lt;p&gt;Daniel Vetter&#39;s 2017 post &lt;a href=&#34;https://blog.ffwll.ch/2017/08/github-why-cant-host-the-kernel.html&#34;&gt;Why Github can&#39;t host the Linux Kernel
Community&lt;/a&gt;
does a good job summarizing the distributed structure of the kernel
development project:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No one (except Linus himself) is developing stuff on top of Linusâ
repository. Every subsystem, and often even big drivers, have their
own git repositories, with their own mailing lists to track
submissions and discuss issues completely separate from everyone
else.&lt;br/&gt;
...&lt;br/&gt;
But looking closer, itâs very, very far away from a single git
repository. Just looking at the upstream subsystem and driver
repositories gives you a few hundred. If you look at the entire
ecosystem, including hardware vendors, distributions, other
linux-based OS and individual products, you easily have a few
thousand major repositories, and many, many more in total.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As skilled as the kernel developers may be, nobody escapes Conway&#39;s
Law. The systems they have developed, &lt;em&gt;including git itself&lt;/em&gt;, are
reflections of the organization that created them.&lt;/p&gt;
&lt;p&gt;The kernel is not developed in the same way that Kubernetes is,
because it&#39;s not organized the same way. Kubernetes is largely run by
many committees (&amp;quot;SIGs&amp;quot;), befitting its origin as a corporate
controlled project. While Linux is developed largely via the
contributions of these same corporations, the technical governance
structure is one of distributed hierarchies.&lt;/p&gt;
&lt;p&gt;Someone looking to contribute to the kernel needs to understand the
kernel subsystem in question. They need to write professional-grade
C. They need to use the notoriously user-hostile &lt;code&gt;git&lt;/code&gt; source control
software. Given those heady requirements, I suspect that plain-text
email is not the barrier to entry that Novotny thinks it is. And
certainly compared to understanding the sprawling organization of the
project it seems like a tiny one.&lt;/p&gt;
&lt;p&gt;Search for &amp;quot;getting into linux kernel development&amp;quot; and the best page
you find is the
&lt;a href=&#34;https://www.kernel.org/doc/html/latest/process/howto.html&#34;&gt;kernel.org&lt;/a&gt;
page that gets you started with... kbuild, email patches, and coding
style? A less narrow search found the &lt;a href=&#34;https://www.kernel.org/doc/html/v5.7/process/development-process.html&#34;&gt;development
process&lt;/a&gt;
page which is better, but not exactly a welcome mat.&lt;/p&gt;
&lt;p&gt;This isn&#39;t a tooling problem, it&#39;s one of human communication. And
what I find especially frustrating about a focus on tooling is that
Novotny&#39;s employer is one of those uniquely positioned to contribute
to fixing the human problems.&lt;/p&gt;
&lt;p&gt;The huge corporate contributors like Microsoft, Google, and RedHat
should be building on-ramps to kernel development. They should be
producing on-boarding documentation, guides to how the project is
structured, and providing mentorship (and sponsorship!) for new kernel
developers. They should be ensuring that their own pipeline of kernel
contributors is diverse and that the contributors they employ are
building an inclusive culture within the LKML and other project
spaces. And they should be holding each other accountable for doing
the same.&lt;/p&gt;
&lt;p&gt;Telling El Reg the issue is plain text email only distracts from
solving the real problems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Locality</title>
      <link>https://blog.0x74696d.com/posts/locality/</link>
      <pubDate>Tue, 04 Jun 2019 01:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/locality/</guid>
      <description>&lt;p&gt;On Memorial Day weekend I grilled a steak, as one does. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; A few days before, I took it out of the freezer and put it into the fridge to thaw on a plate. Late Sunday afternoon I took it out of the fridge and patted it down with a paper towel. Then I put it back in the fridge. Then I took it out and rubbed it down with oil and salt and pepper. Then I put it back in the fridge. I stepped outside to get the charcoals going. When I came back I found that my partner had seen the steak sitting in the fridge unattended and put it back into the freezer. I took the steak out of the freezer and back into the fridge. Then I took it out of the fridge and moved it to the grill. After a few minutes I &lt;s&gt;stretched this metaphor to its breaking point&lt;/s&gt; took the steak off the grill and put it back into the fridge. Then I took it out of the fridge and put it back on the grill to cook the other side. Then I put it back in the fridge. Finally, I took it out to serve.&lt;/p&gt;
&lt;p&gt;This is your data on serverless.&lt;/p&gt;
&lt;p&gt;In December a paper &lt;a href=&#34;https://arxiv.org/pdf/1812.03651.pdf&#34;&gt;&lt;em&gt;Serverless Computing: One Step Forward, Two Steps Back&lt;/em&gt;&lt;/a&gt; (Joseph M. Hellerstein, Jose Faleiro, Joseph E. Gonzalez, Johann Schleier-Smith, Vikram Sreekanti,
Alexey Tumanov and Chenggang Wu) discussed this problem at more depth and seriousness that I&#39;ve done here. The authors address missed opportunities in the current serverless landscape such as specialized hardware (ex. GPUs), but that&#39;s a matter of feature development and not inherent to the model as it currently exists.&lt;/p&gt;
&lt;p&gt;The more fundamental problem they illustrate is that serverless is a &amp;quot;data shipping architecture&amp;quot; where communication between tasks is via storage I/O. Instead of being able to take advantage of all the last couple decades&#39; worth of advances in distributed computing, we&#39;re relying on a giant blob of global state. This problem persists even if we assume that the various operational difficulties of deploying serverless can be resolved with better tooling. (I don&#39;t see any reason this shouldn&#39;t be the case, see companies like &lt;a href=&#34;https://www.iopipe.com/&#34;&gt;IOPipe&lt;/a&gt; for an example of the possibilities). But in the existing implementations of serverless, we can&#39;t get around the problem that your serverless functions are a sea of unstructured side-effects.&lt;/p&gt;
&lt;p&gt;In addition to semantics that&#39;ll make Haskell developers cry, the lack of data locality undermines mechanical sympathy. How can we we reason about performance when the underlying compute is so profoundly abstracted and your next &amp;quot;cache line&amp;quot; is an S3 API response 200ms away? This isn&#39;t so bad if you&#39;re a large cloud provider charging a premium for those milliseconds. But if performance is important to your workload (or perhaps you just care about the environmental impact of all that extraneous compute power), it&#39;s worth considering if the tradeoffs are worth it.&lt;/p&gt;
&lt;p&gt;There&#39;s an interesting historical note here in that only a short time ago the industry understood this problem of data locality, and this led to the Hadoop hype. In a typical map-reduce workflow, your data is distributed across HDFS and then your mapping computation happens physically co-located with the data. This hasn&#39;t ever been my particular area of expertise, but it seems that there were a couple of factors that contributed to the fizzling of the Hadoop hype. One is that it doesn&#39;t support update-in-place semantics, so you can&#39;t quite support arbitrary Unix applications. The second factor is the dominance of object storage in the form of S3 and the various upstack services that AWS has created on top of it. The pricing of S3 is aggressive relative to trying to build HDFS on top of instance storage or EBS, so if you&#39;re all-in on the cloud it&#39;s hard to make the economics work.&lt;/p&gt;
&lt;p&gt;A counterexample of this trend is Joyent&#39;s &lt;a href=&#34;https://github.com/joyent/manta&#34;&gt;Manta&lt;/a&gt;. They have an object store built on top of their Triton platform that allows you to instantiate a container (a SmartOS zone) directly &amp;quot;on&amp;quot; the objects in the object store. So you get a full Unix environment to perform compute on the objects without moving the data. Your ability to parallelize workloads is limited only by the replication factor and size of the storage cluster. Under the hood it&#39;s all built on ZFS, zones, and cleverly managed Postgres. It&#39;s really amazing technology and as a bonus it&#39;s open source!&lt;/p&gt;
&lt;p&gt;There are definitely a few barriers to Manta&#39;s wider adoption. Without Linux support for the compute zones, machine learning teams are less likely to adopt it. It doesn&#39;t support the S3 API so organizations potentially have a bunch of third-party tooling to recreate. While Manta is open source, it&#39;s decidedly not a standalone application but really a way of building an entire datacenter. So it can&#39;t be deployed onto AWS if you&#39;re already there. (Joyent does have an excellent cloud offering if you don&#39;t need much in the way of AWS upstack services.) And most importantly from the standpoint of serverless workflows, there&#39;s not yet a way to &amp;quot;watch&amp;quot; for events on Manta or get a changefeed as an end user; this could allow Lambda-like workflows.&lt;/p&gt;
&lt;aside&gt;Update June 6, 2019: only days after publishing this, Joyent announced they are shutting down their public cloud offering. Triton and Manta are still open source, and many of Joyent&#39;s enterprise customers are running on-prem. But sadly I have trouble imagining someone starting a new project on Triton following that announcement.&lt;/aside&gt;
&lt;p&gt;If you are a smaller cloud provider or just an organization struggling with problems of data locality in your data pipeline, you could do much worse than standing on the shoulders of giants and taking a look at Manta. Even if you&#39;re already all-in on AWS and/or Linux containerization schedulers like k8s or Nomad, there&#39;s an opportunity for a sufficiently motivated team&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; to take inspiration from Manta to build a system that brings better mechanical sympathy to serverless.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Yes, more cooking metaphors.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Which could include me, if you were to hire me to work on projects like this at your org!&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mise-en-Place</title>
      <link>https://blog.0x74696d.com/posts/mise-en-place/</link>
      <pubDate>Mon, 03 Jun 2019 01:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/mise-en-place/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Mise-en-place is the religion of all good line cooks. Do not fuck with a line cook&#39;s &#39;meez&#39; â meaning his setup, his carefully arranged supplies of sea salt, rough-cracked pepper, softened butter, cooking oil, wine, backups, and so on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;cite&gt;â Anthony Bourdain, &lt;em&gt;Kitchen Confidential&lt;/em&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.0x74696d.com/images/20190604/1200px-Mise_en_place_for_hot_station.jpg&#34; alt=&#34;mise-en-place&#34;&gt;&lt;/p&gt;
&lt;aside&gt;photo by Charles Haynes - &lt;a&gt;https://www.flickr.com/photos/haynes/500435491&lt;/a&gt;, CC BY-SA 2.0, &lt;a&gt;https://commons.wikimedia.org/w/index.php?curid=35488828&lt;/a&gt;&lt;/aside&gt;
&lt;p&gt;It probably comes off as pretentious and tone-deaf as a software engineer to compare anything we do at all to work in the food industry. Most of us have pretty cushy lives in comparison and are far removed from that kind of back-breaking manual labor.&lt;/p&gt;
&lt;p&gt;The sole extent of my experience in the food industry is one hot summer of getting up at 4am to open a coffee shop. I&#39;d make lattes for the Philly tourists and office workers until noon, coming home wired, scalded, and with coffee grounds embedded in my fingernails. My primary goal at that age was same as most, which meant trying to pick up the more lucrative closing shift where we served booze and stayed out late afterwards. In retrospect I was terrible at this job and didn&#39;t learn any of its essential lessons until much later in life.&lt;/p&gt;
&lt;h2 id=&#34;keep-the-plates-moving&#34;&gt;Keep the Plates Moving&lt;/h2&gt;
&lt;p&gt;That being said, &lt;em&gt;mise-en-place&lt;/em&gt; is an awesome metaphor for the day-to-day foundations of software engineering work.&lt;/p&gt;
&lt;p&gt;The goal of the production kitchen is to repeatably ship plate after plate at the expected quality level, night after night. The chef takes the measure of the results and adjusts the menu as market conditions (supply availability or customer demand) change. Does this sound familiar?&lt;/p&gt;
&lt;p&gt;This is all made possible by the kitchen team having that foundation of &lt;em&gt;mise&lt;/em&gt; so that they can focus on the work of production without the distraction of looking around for the salt after each dish.&lt;/p&gt;
&lt;p&gt;It is totally possible to ship software without doing it &lt;em&gt;well&lt;/em&gt; (as evidenced by... &lt;em&gt;*gestures broadly*&lt;/em&gt;). But the kitchen of our software development lifecycle can really only sing along when we&#39;ve done it. It&#39;s the work we do to make our work better.&lt;/p&gt;
&lt;p&gt;What am I really talking about here? In software development, your &lt;em&gt;mise&lt;/em&gt; is all the work that&#39;s not writing &amp;quot;production&amp;quot; code. It&#39;s the design document, the team style guide, a good Makefile, writing tests, and continuous integration and delivery. It&#39;s adding hooks for observability. It&#39;s writing good commit messages. It&#39;s writing good after action reviews and making sure they&#39;re shared across the org. All the work that enables our ability to focus and repeatably deliver quality products.&lt;/p&gt;
&lt;h2 id=&#34;stay-out-of-the-weeds&#34;&gt;Stay Out of the Weeds&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you let your mise-en-place run down, get dirty and disorganized, you&#39;ll quickly find yourself spinning in place and calling for backup. I worked with a chef who used to step behind the line to a dirty cook&#39;s station in the middle of a rush to explain why the offending cook was falling behind. He&#39;d press his palm down on the cutting board, which was littered with peppercorns, spattered sauce, bits of parsley, bread crumbs and the usual flotsam and jetsam that accumulates quickly on a station if not constantly wiped away with a moist side towel. &amp;quot;You see this?&amp;quot; he&#39;d inquire, raising his palm so that the cook could see the bits of dirt and scraps sticking to his chef&#39;s palm. &amp;quot;That&#39;s what the inside of your head looks like now.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;cite&gt;â Anthony Bourdain, &lt;em&gt;Kitchen Confidential&lt;/em&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&#39;m pointedly avoiding the term &amp;quot;technical debt.&amp;quot; Not having your &lt;em&gt;mise-en-place&lt;/em&gt; together isn&#39;t just technical debt (although it&#39;s also that). It&#39;s cultural debt. Having a dirty working environment encourages more of the same. What&#39;s one more flaky integration test if half the tests are already flaky? And maybe it&#39;s not worth even writing that one. The on-call got woken up at 2am by an alarm that wasn&#39;t actionable. Ok, we&#39;ll mute that alarm for now and it&#39;ll be the next rotation&#39;s problem.&lt;/p&gt;
&lt;p&gt;All this noise is the enemy of deep work. It can lead your team to confuse urgency for importance. That cultural debt is a lot harder to pay down than the technical debt.&lt;/p&gt;
&lt;h2 id=&#34;expediting&#34;&gt;Expediting&lt;/h2&gt;
&lt;p&gt;Now, there is a particular personality in our industry who really loves to work on their &lt;em&gt;mise&lt;/em&gt; but at the expense of its purpose. This is the person who wants to have a 10000 word style guide with detailed rules for how to name variables and which RPC protocol to use in golang before a single line of code has been written. (What? No, this is a &amp;quot;totally&amp;quot; &amp;quot;hypothetical&amp;quot; &amp;quot;example&amp;quot;.)&lt;/p&gt;
&lt;p&gt;Hopefully in this situation your team can hold each other accountable to their goal. Otherwise you invariably end up with someone acting as expediter to kick everyone in the ass and get them moving. This creates a lot of hard feelings all around, and the team&#39;s manager either looks like an ass or ineffectual, depending on how that went down.&lt;/p&gt;
&lt;h2 id=&#34;home-cooking-vs-professional-cooking&#34;&gt;Home Cooking vs Professional Cooking&lt;/h2&gt;
&lt;p&gt;Another way in which this metaphor is helpful is differentiating between the home cook and the professional line cook. When we&#39;re puttering around at home in our kitchens, having a decent &lt;em&gt;mise-en-place&lt;/em&gt; can make the work more pleasant. But it&#39;s not critical to completing a meal. There&#39;s no customer who&#39;s going to walk out if their entrÃ©e doesn&#39;t land by 7pm sharp. There&#39;s no requirement for repeatability. With sufficient dedication you can try a new dish every day and if a few flop, no one is going to stop you from cooking for them anymore.&lt;/p&gt;
&lt;p&gt;We&#39;re the home cook when we&#39;re writing software for ourselves. When we rework our blog CSS yet again. When we learn a new language. When we scratch an itch about an open source project we use.&lt;/p&gt;
&lt;p&gt;But for the professional, speed and repeatability are vital. Having our &lt;em&gt;mise&lt;/em&gt; tight is a requirement for maintaining quality and velocity.&lt;/p&gt;
&lt;h2 id=&#34;what-do-we-value&#34;&gt;What Do We Value?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;As a cook, your station, and its condition, its state of readiness, is an extension of your nervous system...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;cite&gt;â Anthony Bourdain, &lt;em&gt;Kitchen Confidential&lt;/em&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We don&#39;t value the &lt;em&gt;mise-en-place&lt;/em&gt; processes in and of themselves, but we value the result they enable. But those results aren&#39;t merely the artifacts â the software we write â but also the way we feel about our work. We shouldn&#39;t dismiss the value of flow state, of feeling like the work we&#39;re doing is the best we can do. And we shouldn&#39;t dismiss that our work can carry intrinsic spiritual or emotional value.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Checkpointing Failure</title>
      <link>https://blog.0x74696d.com/posts/checkpointing-failure/</link>
      <pubDate>Sun, 17 Feb 2019 01:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/checkpointing-failure/</guid>
      <description>&lt;p&gt;The conversation goes something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Them: &amp;quot;Our service can&#39;t be autoscaled, run on spot instances, or have its host restarted at random because it runs long-running tasks.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Me: &amp;quot;Are the tasks idempotent?&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Them: &amp;quot;No, but they&#39;re checkpointed.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Me: &amp;quot;Even if we don&#39;t autoscale, run on spot instances, or ever update the host, the host can randomly fail at any time.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Them: &amp;quot;Yes, but that&#39;s less often so it&#39;s ok. Throughput is ok if failure happens rarely.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Me: &amp;quot;But you have a bug if the tasks can&#39;t be safely retried.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Them: &amp;quot;I told you, we checkpoint it.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have lots of experience with batch workloads, there&#39;s probably nothing new here for you. But I had three similar conversations about this problem recently, so let&#39;s look into it.&lt;/p&gt;
&lt;p&gt;The defining characteristic of the kinds of tasks we&#39;re talking about here is that they modify external state: they reserve a table at restaurant, they update the follower count in your social media network, they cause your book order to be shipped. These tasks are typically created by publishing to a queue which our workers are consuming, or they are generated on a schedule via something like cron.&lt;/p&gt;
&lt;p&gt;There are two primary attributes we&#39;re concerned with here. Tasks must be &lt;strong&gt;correct&lt;/strong&gt; and they must have acceptable &lt;strong&gt;throughput.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;By correctness, we mean that the task gets the right answer and does the right work. But because these tasks modify state, correctness also implies &lt;strong&gt;idempotency&lt;/strong&gt;. That is, if we have to retry them because the task fails for reasons out of our control, it should be safe to do so. We should not, for example, cause two of the same book to be shipped to you.&lt;/p&gt;
&lt;p&gt;By throughput, we mean the performance of the task. Specifically in this case the number of tasks that can be processed by the worker. Tasks can vary quite a bit in how long they take, but if we have failures which cause us to start over, our throughput goes down. To reduce the amount of throughput lost, we can rely on &lt;strong&gt;checkpointing&lt;/strong&gt;: we save our work in the middle of the job, allowing us to pick up where we left off with only the work between checkpoints lost.&lt;/p&gt;
&lt;p&gt;The external force on these two values is the &lt;strong&gt;error rate&lt;/strong&gt;. This is how often a task fails, for any reason. Even if the developer never writes a bug, perhaps the task has a network timeout. Perhaps the infrastructure team is making a kernel update and restarts the host. Perhaps the Kubernetes cluster reschedules the job. Or perhaps an electrical fire burns down the rack of hosts, sparing them the indignity of running Kubernetes.&lt;/p&gt;
&lt;p&gt;In the conversation I had above, the developer is conflating the purpose of the two knobs of idempotency and checkpointing. A developer can tune the throughput of their tasks by adjusting the length of steps taken between checkpoints relative to the rate of unexpected errors. But increasing the rate of checkpoints does nothing for correctness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And as we&#39;ll see below, increasing the rate of checkpoints can very easily damage correctness.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ve worked up a simple model to demonstrate the effect the two knobs of idempotency and checkpoint rate have on both correctness and throughput, at various error rates. This model ignores concurrency for clarity, but concurrent tasks make the correctness problem even more important to solve. You can follow along with the code &lt;a href=&#34;https://github.com/tgross/blog.0x74696d.com/blob/trunk/static/_code/checkpointing/checkpoint.py&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We run each set of parameters through our model for 100,000 &amp;quot;ticks&amp;quot;. For each tick through our model, our task updates a pair of counters in a SQL database. In the middle of doing so, there is a small chance that the update fails. Each model reports the values for each counter. The difference in value between the two counters (if any) we&#39;ll refer to as the &lt;strong&gt;drift&lt;/strong&gt; and it reflects correctness. The maximum value of the counter reflects the throughput. In a perfect world where there is a 0% error rate, both counters will have a value of 100,000.&lt;/p&gt;
&lt;p&gt;Let&#39;s look at our idempotent task processor first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;idempotent_task&lt;/span&gt;(conn, checkpoint_steps, err_rate, tick, event_id):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur = conn.cursor()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur.execute(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;INSERT OR REPLACE INTO counterA VALUES (?)&amp;#34;&lt;/span&gt;, (event_id,))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        maybe_error(err_rate)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur.execute(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;INSERT OR REPLACE INTO counterB VALUES (?)&amp;#34;&lt;/span&gt;, (event_id,))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        maybe_checkpoint(conn, tick, checkpoint_steps)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        event_id += 1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;except&lt;/span&gt; Exception:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conn.rollback()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; event_id
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We pass the &lt;code&gt;event_id&lt;/code&gt; into the task and increment it upon success. The &lt;code&gt;event_id&lt;/code&gt; is returned whether or not it has been incremented, so the next iteration will retry failed events. Additionally, we update both counters in a single &lt;strong&gt;atomic transaction&lt;/strong&gt; so that we can&#39;t have partial updates. Note that atomicity and idempotency aren&#39;t the same thing! But you can&#39;t have idempotency without atomicity if you make multiple updates in a given task.&lt;/p&gt;
&lt;p&gt;An alternative to retrying events would be to simply drop work that fails and not retry it. If our interest in the event is bound by time, this might be correct behavior. For example, if the event was a location update of our moving rideshare car, we might decide to ignore a stale update in favor of simply waiting for the next one.&lt;/p&gt;
&lt;p&gt;Now let&#39;s take a look at our non-idempotent processor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;non_idempotent_task&lt;/span&gt;(conn, checkpoint_steps, err_rate, tick, event_id):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur = conn.cursor()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur.execute(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;INSERT OR REPLACE INTO counterA VALUES (?)&amp;#34;&lt;/span&gt;, (event_id,))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        maybe_checkpoint(conn, tick, checkpoint_steps)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        maybe_error(err_rate)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cur.execute(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;INSERT OR REPLACE INTO counterB VALUES (?)&amp;#34;&lt;/span&gt;, (event_id,))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        maybe_checkpoint(conn, tick, checkpoint_steps)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        event_id += 1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;except&lt;/span&gt; Exception:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conn.rollback()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; event_id
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This non-idempotent task represents a common source of bugs. We&#39;ve tried to make it idempotent by using the &lt;code&gt;event_id&lt;/code&gt; as we did in our previous task. But because this isn&#39;t an atomic transaction, each table can see a different set of events! The most common way this happens in my experience is &lt;strong&gt;write skew&lt;/strong&gt;: an application that reads from the database, and then writes values back based on those values without taking into account concurrent updaters.&lt;/p&gt;
&lt;p&gt;I&#39;ve run these two tasks with error rates ranging up to 2%. That rate is perhaps pathological, but consider a task with a 20-minute long step between checkpoints. If its host is restarted once per week for kernel updates that&#39;s a 2% &amp;quot;failure rate&amp;quot; per host, assuming nothing else goes wrong. The other parameter is checkpoint steps ranging from 1 (checkpoint every tick) to 11 (checkpoint every 11 ticks).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.0x74696d.com/images/20190217/plot.png&#34; alt=&#34;diagram&#34;&gt;&lt;/p&gt;
&lt;p&gt;The top graph measures throughput. We can see that as the error rate increases, the throughput decreases as we&#39;d expect. We can also see that as the frequency of checkpointing goes up, the throughput goes up. For non-idempotent tasks that checkpoint after every step, we can reach very nearly 100,000. But for each pair of idempotent and non-idempotent tasks at each value of the checkpoint steps parameter, we see that the idempotent tasks fare worse in throughput performance.&lt;/p&gt;
&lt;p&gt;The bottom graph measures correctness. At the bottom we see a single dotted line representing all the idempotent tasks together: they have no drift between the counters! But for non-idempotent tasks, we can see that as they checkpoint more frequently, not only does the checkpointing not help their correctness, but it compounds the errors they make.&lt;/p&gt;
&lt;p&gt;What this demonstrates is that correctness cannot be truly solved by improving the failure rate of your infrastructure. If you want the wrong answer quickly, feel free to checkpoint without idempotency. But if you want software that works, your tasks need to be idempotent.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging Python Containers in Production</title>
      <link>https://blog.0x74696d.com/posts/debugging-python-containers-in-production/</link>
      <pubDate>Thu, 03 May 2018 01:00:00 +0000</pubDate>
      
      <guid>https://blog.0x74696d.com/posts/debugging-python-containers-in-production/</guid>
      <description>&lt;p&gt;We all figure out our first Python bugs by sprinkling some &lt;code&gt;print&lt;/code&gt; statements over our code. As we gain experience, our debugging toolbox becomes richer and we can figure out harder bugs in development. But production systems provide a different kind of challenge, and this challenge is amplified when we try to debug in a containerized environment. We need to be able to debug running code safely, without impacting performance or interfering with the user experience.&lt;/p&gt;
&lt;p&gt;Some of the most powerful tools like debuggers or eBPF are the hardest to get working with Python containers, so in this post I&#39;ll cover methods to build Python containers for improved instrumentation and debugging. I gave a talk covering most of this content &lt;a href=&#34;https://www.meetup.com/phillypug/events/244306771/&#34;&gt;Philadelphia Python Users Group (PhillyPUG)&lt;/a&gt; last November. The original talk covered a bunch of material on logging but I&#39;ll revisit that in an upcoming post.&lt;/p&gt;
&lt;h2 id=&#34;groundwork&#34;&gt;Groundwork&lt;/h2&gt;
&lt;p&gt;Let&#39;s first assume that you&#39;ve grabbed all the low-hanging fruit. You&#39;re collecting structured logs or events from your applications in a centralized location like &lt;a href=&#34;https://www.elastic.co/elk-stack&#34;&gt;Elasticsearch&lt;/a&gt; or &lt;a href=&#34;https://honeycomb.io/&#34;&gt;Honeycomb.io&lt;/a&gt;. You&#39;re sending unhandled exceptions to something like &lt;a href=&#34;https://sentry.io/welcome/&#34;&gt;Sentry&lt;/a&gt;. If you have a web application, you&#39;re tagging incoming web requests at the edge with something like &lt;a href=&#34;https://www.nginx.com/blog/application-tracing-nginx-plus/&#34;&gt;Nginx request IDs&lt;/a&gt;. You can get really far with that! But it doesn&#39;t give you a detailed insight into how the application is behaving &amp;quot;under the hood&amp;quot;, particularly in the cases where the application is failing in a way that isn&#39;t already known. &lt;a href=&#34;https://youtu.be/AdMqCUhvRz8?t=1215&#34;&gt;Bryan Cantrill&lt;/a&gt; calls these &amp;quot;implicit failure&amp;quot; modes.&lt;/p&gt;
&lt;p&gt;With Python in particular, you can get insight into a lot of the application behavior with tools like &lt;a href=&#34;https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python&#34;&gt;NewRelic&lt;/a&gt;. But this is incredibly expensive to deploy across your whole production footprint, it can&#39;t really help with crashed applications, and it can&#39;t look into the Python interpreter or operating system underneath your code. I also find that the expense means that it doesn&#39;t get used in development or testing environments, and that makes for a gap in understanding.&lt;/p&gt;
&lt;p&gt;The tools I&#39;ll discuss below do require some one-time up-front work, but the payoffs are enormous. First, to use native core dumps you need debugging symbols for Python. To use eBPF on Linux, you need to be on a modern Linux kernel (4.0+, or whatever frankenkernel RedHat is shipping these days). To use &lt;code&gt;usdt&lt;/code&gt; probes for Python you need to be on Python 3.6+. But I&#39;ve found most Linux distributions are not compiling-in the &lt;code&gt;usdt&lt;/code&gt; probes, including the various Docker containers that ship Python. So we&#39;re going to want to build our own Python. Don&#39;t worry! This is much easier than it sounds!&lt;/p&gt;
&lt;h2 id=&#34;building-your-python&#34;&gt;Building Your Python&lt;/h2&gt;
&lt;p&gt;The Docker Hub has a &lt;a href=&#34;https://store.docker.com/images/python&#34;&gt;Python image&lt;/a&gt; in its library. We need to slightly modify that build and make sure it&#39;s part of our continuous integration system. The source for the Dockerfiles is &lt;a href=&#34;https://github.com/docker-library/python/tree/master&#34;&gt;on GitHub&lt;/a&gt;. We only care about Python 3.6 and above.&lt;/p&gt;
&lt;aside&gt;Addendum (Feb 2019): I submitted a pull request to the Docker library (&lt;a href=&#34;https://github.com/docker-library/python/pull/366&#34;&gt;PR #366&lt;/a&gt;) for compiling in &lt;code&gt;usdt&lt;/code&gt; hooks. The change was benchmarked using Python&#39;s own benchmarking suite. Although many of the benchmarks don&#39;t show a significant difference between &lt;code&gt;--with-dtrace&lt;/code&gt; and not, &lt;strong&gt;26 of the 60 tests show a 5%-17% performance hit&lt;/strong&gt;, even without an active trace. This is probably not the approach you want. For live profiling in production you might instead want to check out &lt;a href=&#34;https://github.com/benfred/py-spy&#34;&gt;&lt;code&gt;py-spy&lt;/code&gt;&lt;/a&gt;&lt;/aside&gt;
&lt;p&gt;Python is written in C, and like many C applications under Unix it&#39;s built via Autotools. A &lt;code&gt;configure&lt;/code&gt; step takes a Makefile template and some parameters, and generates a Makefile that we call &lt;code&gt;make&lt;/code&gt; on to build the software. We want to alter the parameters that the Docker build is using to add debugging symbols (the &lt;code&gt;--with-pydebug&lt;/code&gt; flag) and tracepoints (the &lt;code&gt;--with-dtrace&lt;/code&gt; flag). So for example as of this writing, we&#39;d be adding these flags to the template used for the &lt;code&gt;docker/python:3.6-slim&lt;/code&gt; version &lt;a href=&#34;https://github.com/docker-library/python/blob/ba5711fb564133bf9c8b870b431682a4db427219/Dockerfile-slim.template#L61-L67&#34;&gt;here&lt;/a&gt;. We also need to include the installation of &lt;code&gt;systemtap-sdt-dev&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index 6799174..16dbbf0 100644
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--- a/Dockerfile-debian.template
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+++ b/Dockerfile-debian.template
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@@ -19,6 +19,7 @@ ENV PYTHON_VERSION %%PLACEHOLDER%%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; RUN set -ex \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &amp;amp;&amp;amp; buildDeps=&amp;#39; \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                dpkg-dev \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+               systemtap-sdt-dev \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tcl-dev \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tk-dev \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &amp;#39; \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@@ -43,6 +44,8 @@ RUN set -ex \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                --with-system-expat \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                --with-system-ffi \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                --without-ensurepip \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+               --with-pydebug \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+               --with-dtrace \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &amp;amp;&amp;amp; make -j &amp;#34;$(nproc)&amp;#34; \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &amp;amp;&amp;amp; make install \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &amp;amp;&amp;amp; ldconfig \
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &amp;quot;best&amp;quot; way to accomplish this is going to depend a lot on how you build the rest of your software. But the overall steps you need are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fork the &lt;a href=&#34;https://github.com/docker-library/python&#34;&gt;https://github.com/docker-library/python&lt;/a&gt; and add the patch above to any of the templates you need.&lt;/li&gt;
&lt;li&gt;Have your CI system build the container images on a regular basis. You want to make sure you&#39;re pulling in any changes to both Python and the base Debian or Alpine image you&#39;re using.&lt;/li&gt;
&lt;li&gt;Have the output of the CI system be a push to your organization&#39;s private Docker registry (or even a public one if you don&#39;t mind sharing).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find my fork at &lt;a href=&#34;https://github.com/tgross/docker-python&#34;&gt;https://github.com/tgross/docker-python&lt;/a&gt;. I&#39;m using TravisCI to create a weekly build of Python 3.6 and 3.7 for Debian and pushing it to the Docker Hub under &lt;a href=&#34;https://hub.docker.com/r/0x74696d/python/&#34;&gt;https://hub.docker.com/r/0x74696d/python/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you aren&#39;t using containers, don&#39;t have immutable infrastructure, and deploy your software via &lt;code&gt;git pull&lt;/code&gt; in &lt;code&gt;ssh&lt;/code&gt; in a for loop, then you&#39;ll probably want to do something like the following instead. This assumes you&#39;re on a Debian-based distro like Ubuntu and that you have a clone of the Python source code handy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# juuuuust a couple of dependencies...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    build-essential libssl-dev zlib1g-dev &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    libncurses5-dev libncursesw5-dev libreadline-dev &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    libsqlite3-dev libgdbm-dev libdb5.3-dev libbz2-dev &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    libexpat1-dev liblzma-dev tk-dev &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    systemtap-sdt-dev
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    --with-pydebug &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    --with-dtrace &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    --enable-loadable-sqlite-extensions &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    --enable-shared &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    --with-system-expat &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    --with-system-ffi &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    --without-ensurepip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo make install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;debugging-from-sidecars&#34;&gt;Debugging From Sidecars&lt;/h2&gt;
&lt;p&gt;Container images don&#39;t typically include debugging tools. They add a lot to the image size, but they also require root-like privileges (ex. &lt;code&gt;ptrace&lt;/code&gt;, &lt;code&gt;CAP_SYSADMIN&lt;/code&gt;) and the whole point of a container is that you can run it with reduced privileges. So typically you&#39;ll debug a container either from the host (if you have access to the host) or from a &amp;quot;swiss army knife&amp;quot; sidecar container like the one you can find at &lt;a href=&#34;https://github.com/tgross/swiss-army-knife&#34;&gt;https://github.com/tgross/swiss-army-knife&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# swiss-army-knife container for debugging as side-car&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt; ubuntu:16.04&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# add whatever tools you want here&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;RUN&lt;/span&gt; apt-get update &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    &amp;amp;&amp;amp; apt-get install -y &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;       gdb &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;       strace &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;       tcpdump &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;       linux-tools &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;       software-properties-common &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;       apt-transport-https &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;       ca-certificates &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;       curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;       jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;RUN&lt;/span&gt; add-apt-repository &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;deb [trusted=yes] https://repo.iovisor.org/apt/xenial xenial-nightly main&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    &amp;amp;&amp;amp; apt-get update &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    &amp;amp;&amp;amp; apt-get install -y --allow-unauthenticated bcc-tools &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In either case you need to be aware of process namespaces. When you run a process in a container, it can&#39;t see all the other processes running on the host. In our Python container, the first process in the process tree (PID1) is typically going to be Python. Whereas PID1 on the container host is &lt;code&gt;systemd&lt;/code&gt; or some other init system. You need to know which view of the process tree you have when you pass the process ID to your debugging tools.&lt;/p&gt;
&lt;p&gt;If we look at the process tree from the host we get one list of processes:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ps afx

 PID COMMAND
...
1155 /usr/bin/dockerd -H fd://
1350 \_ docker-containerd -l unix:///var/run/docker/libcontainerd/docker-containe
22176 | \_ docker-containerd-shim a1e9578bfc58fb130a8b02fb413fc1579a4885a3fa0751
22193 | | \_ /usr/local/bin/python /usr/local/bin/gunicorn --name myapp
31786 | | \_ /usr/local/bin/python /usr/local/bin/gunicorn --name myapp
  479 | | \_ /usr/local/bin/python /usr/local/bin/gunicorn --name myapp
22879 | \_ docker-containerd-shim 6b6e053851cabc2e257e79ef130c140132d30d935e194b
22896 | \_ /usr/local/bin/python /usr/local/bin/gunicorn --name anotherapp
 3965 | \_ /usr/local/bin/python /usr/local/bin/gunicorn --name anotherapp
 4153 | \_ /usr/local/bin/python /usr/local/bin/gunicorn --name anotherapp
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Whereas if we look at the process tree from inside the container we&#39;ll get a different list:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker exec -it 6b6e053851ca ps -ef

 PID COMMAND
   1 {gunicorn} /usr/local/bin/python /usr/local/bin/gunicorn --name myapp
3446 {gunicorn} /usr/local/bin/python /usr/local/bin/gunicorn --name myapp
3453 {gunicorn} /usr/local/bin/python /usr/local/bin/gunicorn --name myapp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we want to run the eBPF tool &lt;code&gt;pythoncalls&lt;/code&gt; (see below) from the host, we need to use the PID from the point-of-view of the host: &lt;code&gt;sudo /usr/share/bcc/tools/pythoncalls 479&lt;/code&gt;. If we want to run this from a sidecar container, we need to use the container&#39;s view of the PID tree, share the process and network namespace, and give our sidecar elevated privileges for debugging:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    --pid=container:6b6e053851ca &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    --net=container:6b6e053851ca &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    --cap-add sys_admin &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    --cap-add sys_ptrace &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    swiss-army-knife &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&lt;/span&gt;    /usr/share/bcc/tools/pythoncalls -p 1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fatal-failure&#34;&gt;Fatal Failure&lt;/h2&gt;
&lt;p&gt;A fatal failure is one in which the process dies. This can be explicit â the program has an instruction that tells it to exit because it can&#39;t safely continue. Or it can be implicit â the program can&#39;t continue and crashes unexpectedly (for example, with a segfault or Python traceback). While fatal failure is unfortunate from the perspective of the user, it&#39;s often much easier to debug.&lt;/p&gt;
&lt;p&gt;The reason is that whether implicit or explicit, fatal failure allows for post-mortem debugging. We can start with the fatal state (a core dump), and move it off the production environment into our development environment where it can be examined with a lot less pressure. We use tools (our debugger) to reason backwards from the fatal state to a root technical cause. (Yes, yes, I realize there&#39;s no such thing as &amp;quot;root cause&amp;quot; in a complex socio-technical system. We&#39;re talking about the root &lt;em&gt;technical&lt;/em&gt; cause here.) The nice thing about this is that so long as the state was preserved we can typically discover the cause after a single failure.&lt;/p&gt;
&lt;p&gt;Python has its &lt;code&gt;pdb&lt;/code&gt; debugger, but doesn&#39;t have a facility for dumping Python interpreter state to use it offline. If you attach &lt;code&gt;pdb&lt;/code&gt; to a running process, it halts the process (which your users will not like), but you can&#39;t use it to debug post-mortem either. A Python traceback is only serializable in the trivial sense (dump to structured text), which is what services like Sentry use. Fortunately we can get core dumps from Python that are usable in the GNU debugger &lt;code&gt;gdb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When the Python interpreter receives a &lt;code&gt;SIGABRT&lt;/code&gt; signal, it dumps the interpreter&#39;s memory to a core file on disk. On Linux we can use &lt;code&gt;gdb&lt;/code&gt; to read this core dump just as we would any other program. But what&#39;s cool about Python being interpreted is that your Python source code is all in the interpreter&#39;s memory, so &lt;code&gt;gdb&lt;/code&gt; has some extensions that let us debug into the Python application code just as we would the interpreter.&lt;/p&gt;
&lt;p&gt;Under normal circumstances, Python won&#39;t dump core. We can send the &lt;code&gt;kill&lt;/code&gt; signal to it manually, but there&#39;s another option â we can force Python to dump core on uncaught exception. I would only recommend this approach if you have good test coverage and are generally confident in your team&#39;s ability to write code that rarely crashes, as core dumps can get really large and eat up all your disk space unless you have something like &lt;a href=&#34;https://github.com/joyent/manta-thoth&#34;&gt;Joyent&#39;s Thoth&lt;/a&gt; to move them off-disk to shared object storage. Here&#39;s how you&#39;d add this to something like a Django middleware:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;os&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;logging&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;logger = logging.getLogger(__name__)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;AbortOnUncaughtExceptionMiddleware&lt;/span&gt;(&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;object&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;self&lt;/span&gt;, get_response):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;self&lt;/span&gt;.get_response = get_response
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;def&lt;/span&gt; __call__(&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;self&lt;/span&gt;, request):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;self&lt;/span&gt;.get_response(request)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;process_exception&lt;/span&gt;(&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;self&lt;/span&gt;, request, exception):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        logger.error(exception)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        os.abort()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This causes the application to crash and core dump if an exception wasn&#39;t handled. You probably want this to be the last middleware that gets called (so first in the list for Django) so that you can catch things like HTTP 404s more gracefully. Of course you&#39;ll also need your supervisor (&lt;code&gt;systemd&lt;/code&gt; or similar) to restart the process after it crashes.&lt;/p&gt;
&lt;p&gt;On &lt;code&gt;systemd&lt;/code&gt;-based systems, core dumps are handled by &lt;code&gt;coredumpctl&lt;/code&gt;. We can use &lt;code&gt;coredumpctl&lt;/code&gt; to output to a file which we&#39;ll then move to our development environment. Here we&#39;re taking the first python3.6 dump listed by &lt;code&gt;coredumpctl&lt;/code&gt; and outputting it to the file &lt;code&gt;api.coredump&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ coredumpctl list
TIME PID UID GID SIG PRESENT EXE
Wed 2017-11-29 18:06:08 UTC 7858 0 0 6 * /usr/local/bin/python3.6
Wed 2017-11-29 18:06:18 UTC 7872 0 0 6 * /usr/local/bin/python3.6
Wed 2017-11-29 18:06:25 UTC 7881 0 0 6 * /usr/local/bin/python3.6
Wed 2017-11-29 18:07:21 UTC 7890 0 0 6 * /usr/local/bin/python3.6
Wed 2017-11-29 18:07:29 UTC 7914 0 0 6 * /usr/local/bin/python3.6

$ sudo coredumpctl -o api.coredump dump /usr/local/bin/python3.6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once we have the core dump locally, we can load it into &lt;code&gt;gdb&lt;/code&gt; and import the Python-specific tools to list source code, move up and down the stack, read Python backtraces, and print the values of variables. For a detailed treatment of using the &lt;code&gt;gdb&lt;/code&gt; debugging tools see &lt;a href=&#34;https://devguide.python.org/gdb/&#34;&gt;https://devguide.python.org/gdb/&lt;/a&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ PYTHONPATH=/src/cpython/Tools/gdb gdb python3 api.coredump
...
(gdb) python import libpython
(gdb) py-list
  11        def __call__(self, request):
  12            return self.get_response(request)
  13
  14        def process_exception(self, request, exception):
  15            logger.error(exception)
 &amp;gt;16            os.abort()

(gdb) py-up
(gdb) py-locals
self = &amp;lt;AbortOnUncaughtExceptionMiddleware(get_response=&amp;lt;function at remote 0x7fc98848d4a8&amp;gt;) at remote 0x7fc9884b64d0&amp;gt;
request = &amp;lt;WSGIRequest(environ={&amp;#39;wsgi.errors&amp;#39;: &amp;lt;WSGIErrorsWrapper(streams=[&amp;lt;_io.TextIOWrapper at remote 0x7fc990140898&amp;gt;]) at remote 0x7fc9883c25a0&amp;gt;, &amp;#39;wsgi.version&amp;#39;: (1, 0), &amp;#39;wsgi.multithread&amp;#39;: False, &amp;#39;wsgi.multiprocess&amp;#39;: False, &amp;#39;wsgi.run_once&amp;#39;: False, &amp;#39;wsgi.file_wrapper&amp;#39;: &amp;lt;type at remote 0x140a698&amp;gt;, &amp;#39;SERVER_SOFTWARE&amp;#39;: &amp;#39;gunicorn/19.7.1&amp;#39;, &amp;#39;wsgi.input&amp;#39;: &amp;lt;Body(reader=&amp;lt;LengthReader(unreader=&amp;lt;SocketUnreader(buf=&amp;lt;_io.BytesIO at remote 0x7fc9883c01f0&amp;gt;, sock=&amp;lt;socket at remote 0x7fc9883af3b8&amp;gt;, mxchunk=8192) at remote 0x7fc98ace5c88&amp;gt;, length=0) at remote 0x7fc9883c26d8&amp;gt;, buf=&amp;lt;_io.BytesIO at remote 0x7fc9883c0410&amp;gt;) at remote 0x7fc9883c2740&amp;gt;, &amp;#39;gunicorn.socket&amp;#39;: &amp;lt;...&amp;gt;, &amp;#39;REQUEST_METHOD&amp;#39;: &amp;#39;GET&amp;#39;, &amp;#39;QUERY_STRING&amp;#39;: &amp;#39;&amp;#39;, &amp;#39;RAW_URI&amp;#39;: &amp;#39;/histo/10/-1&amp;#39;, &amp;#39;SERVER_PROTOCOL&amp;#39;: &amp;#39;HTTP/1.1&amp;#39;, &amp;#39;HTTP_HOST&amp;#39;: &amp;#39;localhost:8000&amp;#39;, &amp;#39;HTTP_USER_AGENT&amp;#39;: &amp;#39;curl/7.47.0&amp;#39;, &amp;#39;HTTP_ACCEPT&amp;#39;: &amp;#39;*/*&amp;#39;, &amp;#39;wsgi.url_scheme&amp;#39;: &amp;#39;http&amp;#39;, &amp;#39;REMOTE_ADDR&amp;#39;: &amp;#39;127.0.0.1&amp;#39;, &amp;#39;REMOTE_PORT&amp;#39;: &amp;#39;55272&amp;#39;, &amp;#39;SERVER_NAME&amp;#39;: &amp;#39;127.0.0.1&amp;#39;, &amp;#39;SERVER_PORT&amp;#39;: &amp;#39;8000&amp;#39;, &amp;#39;PATH_INFO&amp;#39;: &amp;#39;/histo/10/-1&amp;#39;, &amp;#39;SCRIPT_NAME&amp;#39;: &amp;#39;&amp;#39;}, p...(truncated)
exception = Exception(&amp;#39;uh oh&amp;#39;,))
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;non-fatal-failure&#34;&gt;Non-Fatal Failure&lt;/h2&gt;
&lt;p&gt;In contrast to fatal failures, non-fatal failures are sometimes the hardest problems to solve. These are the &amp;quot;unknown unknowns&amp;quot; of software engineering. Maybe your application is writing corrupted data. Maybe your application mysteriously runs slowly or freezes every few minutes. Maybe your application unexpectedly drops network connections. None of this is magic!&lt;/p&gt;
&lt;p&gt;These kinds of problems are often impossible to replicate in a development environment, especially when we&#39;re talking about the kinds of distributed systems that tend to pop up when we&#39;re working with containers. We need &lt;em&gt;in-vivo&lt;/em&gt; analysis. And that means using tools like DTrace (for Unix) or eBPF (the closest Linux equivalent). Because for better or worse most folks are deploying production on Linux, we&#39;ll talk about eBPF here. The general concepts are similar to DTrace but DTrace is much more mature and frankly nicer to work with.&lt;/p&gt;
&lt;p&gt;The Linux kernel includes a sandboxed bytecode interpreter that was originally created for IP tables filtering (Berkeley Packet Filter or BPF). In the 3.15+ kernel this bytecode interpreter has been extended allow user-defined programs to instrument a live system with minimal performance impact. To create these user-defined programs, we can use the &lt;a href=&#34;https://github.com/iovisor/bcc&#34;&gt;BCC&lt;/a&gt; toolkit. Programs are written in Python (or Lua) and compiled using LLVM to the eBPF bytecode. The eBPF programs read kernel instrumentation (kprobes) or user statically-defined trace points (&lt;code&gt;usdt&lt;/code&gt;). What&#39;s really cool is that the outputs of the program are stored in buffers shared between kernel space and user space, so there&#39;s no inefficient copying of the data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.0x74696d.com/images/20180503/eBPF-diagram.png&#34; alt=&#34;eBPF&#34;&gt;&lt;/p&gt;
&lt;p&gt;See also the &lt;a href=&#34;http://man7.org/linux/man-pages/man2/bpf.2.html&#34;&gt;bpf(2) man page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The BCC toolkit comes with a ton of useful example tools. Want to sniff SSL traffic before the OpenSSL library encrypts it? Try &lt;a href=&#34;https://github.com/iovisor/bcc/blob/master/tools/sslsniff.py&#34;&gt;&lt;code&gt;sslsniff.py&lt;/code&gt;&lt;/a&gt;. Want to figure out your DNS lookup latency? Try &lt;a href=&#34;https://github.com/iovisor/bcc/blob/master/tools/gethostlatency.py&#34;&gt;&lt;code&gt;gethostlatency.py&lt;/code&gt;&lt;/a&gt;. Want to monitor I/O of your disks? Try &lt;a href=&#34;https://github.com/iovisor/bcc/blob/master/tools/biotop.py&#34;&gt;&lt;code&gt;biotop.py&lt;/code&gt;&lt;/a&gt;. Brendan Gregg has a great diagram of where all the various tools appears here: &lt;a href=&#34;http://www.brendangregg.com/Perf/linux_observability_tools.png&#34;&gt;http://www.brendangregg.com/Perf/linux_observability_tools.png&lt;/a&gt;&lt;/p&gt;
&lt;aside&gt;Addendum (Feb 2019): see my addendum above about &lt;code&gt;usdt&lt;/code&gt; hooks in Python and check out &lt;a href=&#34;https://github.com/benfred/py-spy&#34;&gt;&lt;code&gt;py-spy&lt;/code&gt;&lt;/a&gt; instead!&lt;/aside&gt;
&lt;p&gt;In addition to being written in Python, BCC ships with a tools that are useful for instrumenting Python applications. If you have ever tried to profile a Python application you may have tried &lt;a href=&#34;https://docs.python.org/3.6/library/profile.html&#34;&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt;. But it has a performance impact on the application and you can&#39;t add it to a running production application after the fact. Instead you can use the &lt;a href=&#34;https://github.com/iovisor/bcc/blob/master/tools/lib/ucalls.py&#34;&gt;&lt;code&gt;ucalls.py&lt;/code&gt;&lt;/a&gt; library (or its handy &lt;a href=&#34;https://github.com/iovisor/bcc/blob/master/tools/pythoncalls.sh&#34;&gt;&lt;code&gt;pythoncalls&lt;/code&gt;&lt;/a&gt; wrapper). This hooks the usdt endpoints that we made sure our Python interpreter had when we built it earlier with the &lt;code&gt;--with-dtrace&lt;/code&gt; flag. Here we use it on a Django application that makes calculations via &lt;code&gt;numpy&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo /usr/share/bcc/tools/pythoncalls 30695
Tracing calls in process 30695 (language: python)... Ctrl-C to quit.
^C
METHOD                                                                  # CALLS
&amp;lt;frozen importlib._bootstrap_external&amp;gt;.__init__                               1
/srv/venv/api/lib/python3.6/site-packages/django/vi._EnsureCsrfToken          1
/srv/venv/api/lib/python3.6/site-packages/django/co.get_path_info             1
/srv/venv/api/lib/python3.6/site-packages/numpy/lib.poly1d                    1
/srv/venv/api/lib/python3.6/collections/__init__.py.update                    1
/srv/venv/api/lib/python3.6/site-packages/numpy/lib.DummyArray                1
/srv/venv/api/lib/python3.6/site-packages/numpy/lib.vectorize                 1
/srv/venv/api/lib/python3.6/site-packages/django/te.__init__                  1
/usr/local/lib/python3.6/logging/__init__.py._checkLevel                      1
/srv/venv/api/lib/python3.6/site-packages/numpy/cor.&amp;lt;listcomp&amp;gt;                1
/srv/venv/api/lib/python3.6/site-packages/numpy/lin._determine_error_states   1
/srv/venv/api/lib/python3.6/site-packages/numpy/lib.ConverterLockError        1
/srv/venv/api/lib/python3.6/site-packages/numpy/lib._set_function_name        1
/srv/venv/api/lib/python3.6/site-packages/numpy/ma/.mr_class                  1
/srv/venv/api/lib/python3.6/site-packages/numpy/cor._typedict                 1
/srv/venv/api/lib/python3.6/site-packages/numpy/ma/._convert2ma               1
/srv/venv/api/lib/python3.6/site-packages/numpy/lib.deprecate                 1
/usr/local/lib/python3.6/unittest/case.py._Outcome                            1
/srv/venv/api/lib/python3.6/enum.py.__and__                                   1
/srv/venv/api/lib/python3.6/site-packages/django/ut.find_module               1
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In addition to &lt;code&gt;pythoncalls&lt;/code&gt;, there&#39;s &lt;code&gt;pythonflow&lt;/code&gt; to trace execution flow, &lt;code&gt;pythongc&lt;/code&gt; to summarize garbage collection events, and &lt;code&gt;pythonstat&lt;/code&gt; to collect counts of exceptions, imports, or method calls. (These are actually all wrappers around a library of &lt;code&gt;usdt&lt;/code&gt;-reading tools that work for Python, Ruby, Java, or PHP.)&lt;/p&gt;
&lt;p&gt;Happy debugging!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
